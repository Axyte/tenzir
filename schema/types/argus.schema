type argus.cause = enum{
  Start,
  Status,
  Stop,
  Close,
  Error
}

type argus.record = record{
  // Standard fields that are always present.
  StartTime: time,           // stime
  Flgs: string,                   // flgs
  Proto: string #index=hash,      // proto
  SrcAddr: string,                // saddr (MAC or IP)
  Sport: uint64,                    // sport
  Dir: string #index=hash,        // dir
  DstAddr: string,                // daddr (MAC or IP)
  Dport: uint64,                    // dport
  TotPkts: uint64,                 // pkts
  TotBytes: uint64,                // bytes
  State: string #index=hash,      // state
  // Optional fields that are present when invoking ra(1) with -s +F where F is
  // the field name from the man page of ra(1).
  SrcId: string #index=hash,      // srcid
  Rank: uint64,                    // rank
  LastTime: time,                 // ltime
  Trans: uint64,                   // trans
  Seq: uint64,                     // seq
  Dur: duration #unit=s,          // dur
  RunTime: duration #unit=s,      // runtime
  IdleTime: duration #unit=s,     // idle
  Mean: double,                     // mean
  StdDev: double,                   // stddev
  Sum: double,                      // sum
  Min: double,                      // min
  Max: double,                      // max
  SrcMac: string,                 // smac
  DstMac: string,                 // dmac
  SrcOui: string,                 // soui
  DstOui: string,                 // doui
  sTos: uint64,                    // stos
  dTos: uint64,                    // dtos
  sDSb: string,                   // sdsb
  dDSb: string,                   // ddsb
  sCo: string #index=hash,        // sco
  dCo: string #index=hash,        // dco
  sTtl: uint64 #max=255,           // sttl
  dTtl: uint64 #max=255,           // dttl
  sHops: uint64,                   // shops
  dHops: uint64,                   // dhops
  sIpId: string #index=hash #hex, // sipid
  dIpId: string #index=hash #hex, // dipid
  sMpls: string #index=hash,      // smpls
  dMpls: string #index=hash,      // dmpls
  AutoId: string #index=hash,     // autoid
  sAS: uint64,                     // sas
  dAS: uint64,                     // das
  iAS: uint64,                     // ias
  Cause: argus.cause,             // cause
  NStrok: uint64,                  // nstroke
  sNStrok: uint64,                 // snstroke
  dNStrok: uint64,                 // dnstroke
  SrcPkts: uint64,                 // spkts
  DstPkts: uint64,                 // dpkts
  SrcBytes: uint64,                // sbytes
  DstBytes: uint64,                // dbytes
  TotAppByte: uint64,              // appbytes
  SAppBytes: uint64,               // sappbytes
  DAppBytes: uint64,               // dappbytes
  PCRatio: double,                  // pcr
  Load: double,                     // load
  SrcLoad: double,                  // sload
  DstLoad: double,                  // dload
  Loss: uint64,                    // loss
  SrcLoss: uint64,                 // sloss
  DstLoss: uint64,                 // dloss
  pLoss: double,                    // ploss
  pSrcLoss: double,                 // sploss (psloss in man page)
  pDstLoss: double,                 // dploss (pdloss in man page)
  Retrans: uint64,                 // retrans
  SrcRetra: uint64,                // sretrans
  DstRetra: uint64,                // dretrans
  pRetran: double,                  // pretrans
  pSrcRetr: double,                 // spretrans (psretrans in man page)
  pDstRetr: double,                 // dpretrans (pdretrans in man page)
  SrcGap: uint64,                  // sgap
  DstGap: uint64,                  // dgap
  Rate: double,                     // rate
  SrcRate: double,                  // srate
  DstRate: double,                  // drate
  SIntPkt: duration #unit=ms,     // sintpkt
  SIntDist: string,               // sintdist
  SIntPktAct: duration #unit=ms,  // sintpktact
  SIntActDist: string,            // sintdistact (sintackdist in man page)
  SIntPktIdl: duration #unit=ms,  // sintpktidl
  SIntIdlDist: string,            // sintdistidl
  SIntPktMax: uint64,              // not present in man page
  SIntPktMin: uint64,              // not present in man page
  DIntPkt: duration #unit=ms,     // dintpkt
  DIntDist: string,               // dintdist
  DIntPktAct: duration #unit=ms,  // dintpktact
  DIntActDist: string,            // dintdistact (sintackdist in man page)
  DIntPktIdl: duration #unit=ms,  // dintpktidl
  DIntIdlDist: string,            // dintdistidl
  DIntPktMax: uint64,              // not present in man page
  DIntPktMin: uint64,              // not present in man page
  SrcJitter: duration #unit=ms,   // sjit
  SrcJitAct: duration #unit=ms,   // sjitact
  SrcJitIdl: duration #unit=ms,   // sjitidl (sitidle in man page)
  DstJitter: duration #unit=ms,   // djit
  DstJitAct: duration #unit=ms,   // djitact
  DstJitIdl: duration #unit=ms,   // djitidl (djitidle in man page)
  Label: string,                  // label
  srcUdata: string,               // suser
  dstUdata: string,               // duser
  SrcWin: uint64,                  // swin
  DstWin: uint64,                  // dwin
  sVlan: string #index=hash,      // svlan
  dVlan: string #index=hash,      // dvlan
  sVid: string #index=hash,       // svid
  dVid: string #index=hash,       // dvid
  sVpri: string #index=hash,      // svpri
  dVpri: string #index=hash,      // dvpri
  SRange: time,                   // srng
  ERange: time,                   // srng
  SrcTCPBase: uint64,              // stcpb
  DstTCPBase: uint64,              // dtcpb
  TcpRtt: duration #unit=s,       // tcprtt
  SynAck: duration #unit=s,       // synack
  AckDat: duration #unit=s,       // ackdat
  TcpOpt: string,                 // tcpopt
  Inode: string,                  // inode
  Offset: uint64,                  // offset
  sMeanPktSz: double,               // smeansz
  dMeanPktSz: double,               // dmeansz
  sPktSz: double,                   // spktsz
  sMaxPktSz: double,                // smaxsz
  dPktSz: double,                   // dpktsz
  dMaxPktSz: double,                // dmaxsz
  sminPktSz: double,                // sminsz
  dminPktSz: double,                // dminsz
  // Fields that do not exist in the ra(1) man page under -s. These have been
  // inferred by looking a the source code.
  STcpMax: double,                  // stcpmax
  DTcpMax: double,                  // dtcpmax
  dlDur: duration #unit=s,        // dldur
  dlsTime: time,                  // dlstime
  dllTime: time,                  // dlltime
  dsPkts: uint64,                  // dspkts
  ddPkts: uint64,                  // ddpkts
  dsBytes: uint64,                 // dsbytes
  ddBytes: uint64,                 // ddbytes
  JDelay: duration #unit=s,       // jdelay
  LDelay: duration #unit=s,       // ldelay
  sEnc: string,                   // senc
  dEnc: string,                   // denc
  IcmpId: string #index=hash      // icmpid
}
