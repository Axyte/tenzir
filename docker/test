#! /usr/bin/env bash
set -eux -o pipefail

build=0
while [ "$#" -gt 0 ]; do
  case "$1" in
    -h|--help)
      >&2 echo "Execute tests for VAST's Docker Compose files."
      >&2 echo "NOTE: By default, attempts to pull images rather than building."
      >&2 echo ""
      >&2 echo "USAGE: ${0} [--build] [-h|--help]"
      exit 0
      ;;
    --build)
      build=1
      shift 1
      ;;
    *)
      >&2 echo "unknown option: $1" >&2
      exit 1
      ;;
  esac
done

export COMPOSE_FILE="compose/vast.yaml"
if (( "${build}" == 1 )); then
  export VAST_CONTAINER_REGISTRY='docker.io'
  export VAST_CONTAINER_REF='latest'
  export COMPOSE_FILE="${COMPOSE_FILE}:compose/vast.build.yaml"
  build_policy='--pull=never'
else
  export VAST_CONTAINER_REGISTRY="${VAST_CONTAINER_REGISTRY:-ghcr.io}"
  export VAST_CONTAINER_REF="${VAST_CONTAINER_REF:-$(git rev-parse --abbrev-ref HEAD | sed -E 's/[^a-zA-Z0-9._-]+/-/g;s/^-*//')}"
  if [[ "${VAST_CONTAINER_REF}" == "master" ]]; then
    export VAST_CONTAINER_REF="$(git rev-parse HEAD)"
  fi
  build_policy='--pull=always'
fi

pushd "$(git -C "$(dirname "$(readlink -f "${0}")")" rev-parse --show-toplevel)/docker"

# Bring up the Docker Compose stack.
docker compose down --volumes
docker compose up ${build_policy} --detach

# Wait for VAST to be reachable.
# FIXME: The below would be ideal in the absence of VAST's client commands
# waiting for the VAST server to be reachable, but it doesn't work when
# executing this script in GitHub Actions for yet undetermined reasons. We're
# just using a sleep instead as a workaround for now.
# while ! lsof -i :5158; do
#   sleep 1
# done
sleep 3

# Run a basic status check; we don't particularly care about the output itself,
# so essentially we're just checking for the exit code.
docker compose run vast status > /dev/null

# Ingest some test data.
gunzip -c ../vast/integration/data/zeek/*.log.gz |
  docker compose run --no-TTY vast import --blocking zeek
docker compose run --no-TTY vast import --blocking suricata \
  < ../vast/integration/data/suricata/eve.json

# Check whether we imported the right amount of data.
num_imported="$(docker compose run --interactive=false vast count)"
num_imported_expected="18494"
[[ "${num_imported}" == "${num_imported_expected}" ]]

# Print logs for easier debugging in case something went wrong.
docker compose ps
docker compose logs

# Assert that all containers that exited have exited cleanly.
docker compose ps --format json --all --status exited |
  jq -re 'map(.ExitCode != 0) | index(false)'

docker compose down --volumes

popd
