"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7438],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),d=o,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},58913:(e,t,r)=>{r.d(t,{ZP:()=>l});var n=r(87462),o=(r(67294),r(3905));const a={toc:[]},i="wrapper";function l(e){let{components:t,...r}=e;return(0,o.kt)(i,(0,n.Z)({},a,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"Commercial Plugin",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"This feature is available as commercial ",(0,o.kt)("a",{parentName:"p",href:"/docs/understand/architecture/plugins"},"plugin")," that runs on top\nopen-source VAST. Please ",(0,o.kt)("a",{parentName:"p",href:"https://tenzir.com/contact-us"},"contact us")," if you'd like to try it out.")))}l.isMDXComponent=!0},26455:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(87462),o=(r(67294),r(3905)),a=r(58913);const i={description:"Network traffic flow summaries"},l="NetFlow",s={unversionedId:"understand/formats/netflow",id:"understand/formats/netflow",title:"NetFlow",description:"Network traffic flow summaries",source:"@site/docs/understand/formats/netflow.md",sourceDirName:"understand/formats",slug:"/understand/formats/netflow",permalink:"/docs/understand/formats/netflow",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/master/web/docs/understand/formats/netflow.md",tags:[],version:"current",frontMatter:{description:"Network traffic flow summaries"},sidebar:"docsSidebar",previous:{title:"JSON",permalink:"/docs/understand/formats/json"},next:{title:"PCAP",permalink:"/docs/understand/formats/pcap"}},p={},c=[{value:"Parser",id:"parser",level:2}],u={toc:c},m="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(m,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"netflow"},"NetFlow"),(0,o.kt)(a.ZP,{mdxType:"CommercialPlugin"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/NetFlow"},"NetFlow")," is suite of protocols for\ncomputing and relaying flow-level statistics. An ",(0,o.kt)("em",{parentName:"p"},"exporter"),", such as a router or\nswitch, aggregates packets into flow records and sends them to a ",(0,o.kt)("em",{parentName:"p"},"collector"),"."),(0,o.kt)("admonition",{title:"Supported Versions",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"VAST has native support for NetFlow ",(0,o.kt)("strong",{parentName:"p"},"v5"),", ",(0,o.kt)("strong",{parentName:"p"},"v9"),", and ",(0,o.kt)("strong",{parentName:"p"},"IPFIX"),". We have ",(0,o.kt)("a",{parentName:"p",href:"https://tenzir.com/blog/flexible-netflow-for-flexible-security-analytics/"},"a\nblog post")," about how we implement ",(0,o.kt)("em",{parentName:"p"},"Flexible NetFlow"),". For\nIPFIX we support Private Enterprise Numbers 3054 (IXIA IxFlow) and 29305\n(Bidirectional Flow Export) are supported. Please contact us if you require\nsupport for additional Private Enterprise Numbers.")),(0,o.kt)("h2",{id:"parser"},"Parser"),(0,o.kt)("p",null,"VAST can either act as collector or parse binary NetFlow data on standard input.\nThe NetFlow version is automatically identified at runtime, and mixing multiple\nversions (e.g., from multiple export devices) is possible."),(0,o.kt)("p",null,"To spin up a VAST client as NetFlow a collector, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"vast import netflow"),"\ncommand:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"vast import -l :2055/tcp netflow\n")),(0,o.kt)("p",null,"A commonly used NetFlow collector is ",(0,o.kt)("inlineCode",{parentName:"p"},"nfcapd"),", which writes NetFlow\nmessages into framed files. To replay from ",(0,o.kt)("inlineCode",{parentName:"p"},"nfcapd")," you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"nfreplay"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"vast import -l :9995/udp netflow\nnfreplay < path/to/capture.nfcapd # Exports all records to 127.0.0.1:9995\n")),(0,o.kt)("p",null,"Because VAST behaves like any other UNIX tool, it can also import NetFlow\nmessages from files or standard input directly:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# From file\nvast import -r path/to/netflow.bin netflow\n\n# Pipe multiple files at once\ncat path/to/*.bin | vast import netflow\n")))}d.isMDXComponent=!0}}]);