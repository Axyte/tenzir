"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5266],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,g=m["".concat(p,".").concat(d)]||m[d]||c[d]||o;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},66645:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>f,default:()=>N,frontMatter:()=>g,metadata:()=>k,toc:()=>v});var a=n(3905),r=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,u=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,m=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&u(e,n,t[n]);if(l)for(var n of l(t))s.call(t,n)&&u(e,n,t[n]);return e},c=(e,t)=>o(e,i(t)),d=(e,t)=>{var n={};for(var a in e)p.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&l)for(var a of l(e))t.indexOf(a)<0&&s.call(e,a)&&(n[a]=e[a]);return n};const g={},f="summarize",k={unversionedId:"understand/language/operators/summarize",id:"version-v3.0.0/understand/language/operators/summarize",title:"summarize",description:"The summarize operator bundles input records according to a grouping",source:"@site/versioned_docs/version-v3.0.0/understand/language/operators/summarize.md",sourceDirName:"understand/language/operators",slug:"/understand/language/operators/summarize",permalink:"/docs/understand/language/operators/summarize",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/master/web/versioned_docs/version-v3.0.0/understand/language/operators/summarize.md",tags:[],version:"v3.0.0",frontMatter:{},sidebar:"docsSidebar",previous:{title:"select",permalink:"/docs/understand/language/operators/select"},next:{title:"taste",permalink:"/docs/understand/language/operators/taste"}},h={},v=[{value:"Synopsis",id:"synopsis",level:2},{value:"Aggregation Functions",id:"aggregation-functions",level:3},{value:"Grouping",id:"grouping",level:3},{value:"Time Resolution",id:"time-resolution",level:3},{value:"Example",id:"example",level:2},{value:"YAML Syntax Example",id:"yaml-syntax-example",level:2}],y={toc:v},b="wrapper";function N(e){var t=e,{components:n}=t,r=d(t,["components"]);return(0,a.kt)(b,c(m(m({},y),r),{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",m({},{id:"summarize"}),"summarize"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"summarize")," operator bundles input records according to a grouping\nexpression and applies an aggregation function over each group."),(0,a.kt)("p",null,"The extent of a group depends on the pipeline input. For import and export\npipelines, a group comprises a single batch (configurable as\n",(0,a.kt)("inlineCode",{parentName:"p"},"vast.import.batch-size"),"). For compaction, a group comprises an entire partition\n(configurable as ",(0,a.kt)("inlineCode",{parentName:"p"},"vast.max-partition-size"),")."),(0,a.kt)("h2",m({},{id:"synopsis"}),"Synopsis"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{}),"summarize [FIELD=]AGGREGATION(EXTRACTOR[, \u2026])[, \u2026] by EXTRACTOR[, \u2026] [resolution DURATION]\n")),(0,a.kt)("h3",m({},{id:"aggregation-functions"}),"Aggregation Functions"),(0,a.kt)("p",null,"Aggregation functions compute a single value of one or more columns in a given\ngroup. Fields that neither occur in an aggregation function nor in the ",(0,a.kt)("inlineCode",{parentName:"p"},"by")," list\nare dropped from the output."),(0,a.kt)("p",null,"The following aggregation functions are available:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sum"),": Computes the sum of all grouped values."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"min"),": Computes the minimum of all grouped values."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"max"),": Computes the maxiumum of all grouped values."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"any"),": Computes the disjunction (OR) of all grouped values. Requires the\nvalues to be booleans."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"all"),": Computes the conjunction (AND) of all grouped values. Requires the\nvalues to be booleans."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"distinct"),": Creates a sorted list of all unique grouped values that are not\nnull. If the values are lists, operates on the all values inside the lists\nrather than the lists themselves."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sample"),": Takes the first of all grouped values that is not null."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"count"),": Counts all grouped values that are not null.")),(0,a.kt)("h3",m({},{id:"grouping"}),"Grouping"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"group-by")," option specifies a list of\n",(0,a.kt)("a",m({parentName:"p"},{href:"/docs/understand/language/expressions#extractors"}),"extractors")," that should form a group. VAST\ninternally calculates the combined hash for all extractors for every row and\nputs the data into buckets for subsequent aggregation."),(0,a.kt)("h3",m({},{id:"time-resolution"}),"Time Resolution"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"resolution")," option specifies an optional duration value that specifies the\ntolerance when comparing time values in the ",(0,a.kt)("inlineCode",{parentName:"p"},"group-by")," section. For example,\n",(0,a.kt)("inlineCode",{parentName:"p"},"01:48")," is rounded down to ",(0,a.kt)("inlineCode",{parentName:"p"},"01:00")," when a 1-hour ",(0,a.kt)("inlineCode",{parentName:"p"},"resolution")," is used."),(0,a.kt)("h2",m({},{id:"example"}),"Example"),(0,a.kt)("p",null,"Show all distinct ",(0,a.kt)("inlineCode",{parentName:"p"},"id.origin_port")," values grouped by ",(0,a.kt)("inlineCode",{parentName:"p"},"id.origin_ip")," values."),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{}),"summarize distinct(id.origin_port) by id.origin_ip\n")),(0,a.kt)("p",null,"Show all distinct ",(0,a.kt)("inlineCode",{parentName:"p"},"id.origin_port")," values grouped by ",(0,a.kt)("inlineCode",{parentName:"p"},"id.origin_ip")," values in\na field with the custom name ",(0,a.kt)("inlineCode",{parentName:"p"},"total_ports"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{}),"summarize total_ports=distinct(id.origin_port) by id.origin_ip\n")),(0,a.kt)("p",null,"Show the result of ",(0,a.kt)("inlineCode",{parentName:"p"},"any(Initiated)")," grouped by the ",(0,a.kt)("inlineCode",{parentName:"p"},"SourceIp, SourcePort,\nDestinationPoint")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"UtcTime")," values, with an optional time resolution of one\nminute."),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{}),"summarize any(Initiated) by SourceIp, SourcePort, DestinationPoint, UtcTime resolution 1 minute\n")),(0,a.kt)("h2",m({},{id:"yaml-syntax-example"}),"YAML Syntax Example"),(0,a.kt)("admonition",m({},{title:"Deprecated",type:"info"}),(0,a.kt)("p",{parentName:"admonition"},"The YAML syntax is deprecated since VAST v3.0, and will be removed in a future\nrelease. Please use the pipeline syntax instead.")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"summarize")," operator has grouping and aggregation options. The general\nstructure looks as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-yaml"}),"summarize:\n  group-by:\n    # inputs\n  time-resolution:\n    # bucketing for temporal grouping\n  aggregate:\n    # output \n")),(0,a.kt)("p",null,"There exist three ways to configure an aggregation function in the YAML syntax:"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-yaml"}),"# Long form: Specify a list of input extractors explicitly.\noutput_field_name:\n  aggregation_function:\n    - input_extractor_1\n    - ...\n    - input_extractor_n\n\n# Long form: Specify a single input extractor.\noutput_field_name:\n  aggregation_function: input_extractor\n\n# Short form: Input extractor equals output field name.\noutput_field_name: aggregation_function\n")),(0,a.kt)("p",null,"Here's a full example:"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-yaml"}),"summarize:\n  group-by:\n    - timestamp\n    - proto\n    - event_type\n  time-resolution: 1 hour\n  aggregate:\n    timestamp_min:\n      min: timestamp\n    timestamp_max:\n      max: timestamp\n    pkts_toserver: sum\n    pkts_toclient: sum\n    bytes_toserver: sum\n    bytes_toclient: sum\n    start: min\n    end: max\n    alerted: any\n    ips:\n      distinct:\n        - src_ip\n        - dest_ip\n")))}N.isMDXComponent=!0}}]);