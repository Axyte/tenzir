"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[48225],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=c(n),d=i,f=p["".concat(l,".").concat(d)]||p[d]||u[d]||a;return n?r.createElement(f,s(s({ref:t},m),{},{components:n})):r.createElement(f,s({ref:t},m))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:i,s[1]=o;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},37784:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>g,default:()=>w,frontMatter:()=>f,metadata:()=>v,toc:()=>y});var r=n(3905),i=Object.defineProperty,a=Object.defineProperties,s=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,m=(e,t,n)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,p=(e,t)=>{for(var n in t||(t={}))l.call(t,n)&&m(e,n,t[n]);if(o)for(var n of o(t))c.call(t,n)&&m(e,n,t[n]);return e},u=(e,t)=>a(e,s(t)),d=(e,t)=>{var n={};for(var r in e)l.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&o)for(var r of o(e))t.indexOf(r)<0&&c.call(e,r)&&(n[r]=e[r]);return n};const f={sidebar_position:6},g="Collect metrics",v={unversionedId:"setup-guides/collect-metrics",id:"version-Tenzir v4.6/setup-guides/collect-metrics",title:"Collect metrics",description:"Collecting metrics is optional and incurs minimal overhead. We recommend",source:"@site/versioned_docs/version-Tenzir v4.6/setup-guides/collect-metrics.md",sourceDirName:"setup-guides",slug:"/setup-guides/collect-metrics",permalink:"/Tenzir v4.6/setup-guides/collect-metrics",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/versioned_docs/version-Tenzir v4.6/setup-guides/collect-metrics.md",tags:[],version:"Tenzir v4.6",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"docsSidebar",previous:{title:"Tune performance",permalink:"/Tenzir v4.6/setup-guides/tune-performance/"},next:{title:"User Guides",permalink:"/Tenzir v4.6/user-guides"}},h={},y=[{value:"Enable metrics collection",id:"enable-metrics-collection",level:2},{value:"Write metrics to a file or UNIX domain socket",id:"write-metrics-to-a-file-or-unix-domain-socket",level:2},{value:"Query metrics via pipelines",id:"query-metrics-via-pipelines",level:2}],k={toc:y},b="wrapper";function w(e){var t=e,{components:n}=t,i=d(t,["components"]);return(0,r.kt)(b,u(p(p({},k),i),{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",p({},{id:"collect-metrics"}),"Collect metrics"),(0,r.kt)("admonition",p({},{title:"Minimal overhead",type:"note"}),(0,r.kt)("p",{parentName:"admonition"},"Collecting metrics is optional and incurs minimal overhead. We recommend\nenabling metrics unless disk space is scarce or every last bit of performance\nneeds to be made available to other parts of the system.")),(0,r.kt)("p",null,"Tenzir keeps detailed track of system metrics that reflect pipeline state, such\nas ingestion performance, query latencies, and resource usage."),(0,r.kt)("p",null,"Components send their metrics to a central ",(0,r.kt)("em",{parentName:"p"},"accountant")," that relays the\ntelemetry to a configured sink. The accountant is disabled by default and waits\nfor metrics reports from other components. It represents telemetry as regular\n",(0,r.kt)("inlineCode",{parentName:"p"},"tenzir.metrics")," events with the following schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-yaml"}),"metrics:\n  record:\n    - ts: timestamp\n    - version: string\n    - actor: string\n    - key: string\n    - value: string\n    - metadata:\n        map:\n          key: string\n          value: string\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ts")," field is always displayed in Coordinated Universal Time (UTC) without a\ntimezone offset. In case you want to correlate metrics data with a Tenzir log\nmessages you need to add the local timezone offset to arrive at the correct time\nwindow for the matching logs."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"version")," field is the version of Tenzir."),(0,r.kt)("h2",p({},{id:"enable-metrics-collection"}),"Enable metrics collection"),(0,r.kt)("p",null,"Set the key ",(0,r.kt)("inlineCode",{parentName:"p"},"tenzir.enable-metrics")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," in order to collect metrics:"),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-yaml"}),"tenzir:\n  enable-metrics: true\n")),(0,r.kt)("p",null,"Alternatively, pass the corresponding command-line option when starting a Tenzir\nnode:"),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"tenzir-node --enable-metrics\n")),(0,r.kt)("h2",p({},{id:"write-metrics-to-a-file-or-unix-domain-socket"}),"Write metrics to a file or UNIX domain socket"),(0,r.kt)("p",null,"Tenzir also supports writing metrics to a file or UNIX domain socket (UDS). You\ncan enable them individually or at the same time:"),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-yaml"}),'tenzir:\n  metrics:\n    # Configures if and where metrics should be written to a file.\n    file-sink:\n      enable: false\n      real-time: false\n      path: /tmp/tenzir-metrics.log\n    # Configures if and where metrics should be written to a socket.\n    uds-sink:\n      enable: false\n      real-time: false\n      path: /tmp/tenzir-metrics.sock\n      type: datagram # possible values are "stream" or "datagram"\n    # Configures if and where metrics should be written to Tenzir itself.\n    self-sink:\n      enable: false\n')),(0,r.kt)("p",null,"Both the file and UDS sinks write metrics as NDJSON and inline the ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata"),"\nkey-value pairs into the top-level object. Tenzir buffers metrics for these\nsinks to batch I/O operations. To enable real-time metrics reporting, set the\noptions ",(0,r.kt)("inlineCode",{parentName:"p"},"tenzir.metrics.file-sink.real-time")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"tenzir.metrics.uds-sink.real-time")," respectively in your configuration file."),(0,r.kt)("h2",p({},{id:"query-metrics-via-pipelines"}),"Query metrics via pipelines"),(0,r.kt)("p",null,"The self-sink routes metrics as events into Tenzir's internal storage engine,\nallowing you to work with metrics using Tenzir's pipelines. The schema for the\nself-sink is slightly different, with the key being embedded in the schema name:"),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-yaml"}),"tenzir.metrics.<key>:\n  record:\n    - ts: timestamp\n    - version: string\n    - actor: string\n    - key: string\n    - value: string\n    - <metadata...>\n")),(0,r.kt)("p",null,"Here's an example that shows the start up latency of Tenzir's stores,\ngrouped into 10 second buckets and looking at the minimum and the maximum\nlatency, respectively, for all buckets."),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"tenzir '\n  export\n  | where #schema == \"tenzir.metrics.passive-store.init.runtime\"\n  | select ts, value\n  | summarize min(value), max(value) by ts resolution 10s\n  '\n")),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{"ts": "2023-02-28T17:21:50.000000", "min(value)": 0.218875, "max(value)": 107.280125}\n{"ts": "2023-02-28T17:20:00.000000", "min(value)": 0.549292, "max(value)": 0.991235}\n// ...\n')))}w.isMDXComponent=!0}}]);