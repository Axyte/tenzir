"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3264],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),m=a,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},25599:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>b,contentTitle:()=>h,default:()=>O,frontMatter:()=>f,metadata:()=>y,toc:()=>v});var n=r(3905),a=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,p=(e,t,r)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,u=(e,t)=>{for(var r in t||(t={}))l.call(t,r)&&p(e,r,t[r]);if(s)for(var r of s(t))c.call(t,r)&&p(e,r,t[r]);return e},d=(e,t)=>o(e,i(t)),m=(e,t)=>{var r={};for(var n in e)l.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&s)for(var n of s(e))t.indexOf(n)<0&&c.call(e,n)&&(r[n]=e[n]);return r};const f={sidebar_position:5},h="Show available schemas",y={unversionedId:"user-guides/show-available-schemas",id:"user-guides/show-available-schemas",title:"Show available schemas",description:"When you write a pipeline, you inevitably reference field names from records. If",source:"@site/docs/user-guides/show-available-schemas.md",sourceDirName:"user-guides",slug:"/user-guides/show-available-schemas",permalink:"/next/user-guides/show-available-schemas",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/docs/user-guides/show-available-schemas.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"Export from a node",permalink:"/next/user-guides/export-from-a-node"},next:{title:"Transform data at rest",permalink:"/next/user-guides/transform-data-at-rest"}},b={},v=[],g={toc:v},w="wrapper";function O(e){var t=e,{components:r}=t,a=m(t,["components"]);return(0,n.kt)(w,d(u(u({},g),a),{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",u({},{id:"show-available-schemas"}),"Show available schemas"),(0,n.kt)("p",null,"When you write a pipeline, you inevitably reference field names from records. If\nyou do not know the shape of your data or if the data is highly dynamic, you can\nintrospect the available ",(0,n.kt)("a",u({parentName:"p"},{href:"/next/data-model/schemas"}),"schemas"),"."),(0,n.kt)("p",null,"The equivalent of the ",(0,n.kt)("inlineCode",{parentName:"p"},"SHOW TABLES")," of many databases is ",(0,n.kt)("inlineCode",{parentName:"p"},"show schemas"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-bash"}),"tenzir 'show schemas | write yaml'\n")),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-yaml"}),"# Excerpt only\n- zeek.conn:\n    record:\n      - ts:\n          timestamp: time\n      - uid:\n          type: string\n          attributes:\n            index: hash\n      - id:\n          zeek.conn_id:\n            record:\n              - orig_h: ip\n              - orig_p:\n                  port: uint64\n              - resp_h: ip\n              - resp_p:\n                  port: uint64\n      - proto: string\n      - service: string\n      - duration: duration\n      - orig_bytes: uint64\n      - resp_bytes: uint64\n      - conn_state: string\n      - ...\n")),(0,n.kt)("p",null,"This example shows the schema for a Zeek conn.log. You can see the various\nfields as list of key-value pairs under the ",(0,n.kt)("inlineCode",{parentName:"p"},"record")," key. The nested record\n",(0,n.kt)("inlineCode",{parentName:"p"},"id")," that is a type alias with the type name ",(0,n.kt)("inlineCode",{parentName:"p"},"zeek.conn_id"),"."))}O.isMDXComponent=!0}}]);