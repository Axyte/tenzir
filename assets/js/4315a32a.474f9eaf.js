"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1250],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},89294:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={description:"Typed textual data"},o="ASCII",s={unversionedId:"understand/formats/ascii",id:"understand/formats/ascii",title:"ASCII",description:"Typed textual data",source:"@site/docs/understand/formats/ascii.md",sourceDirName:"understand/formats",slug:"/understand/formats/ascii",permalink:"/docs/understand/formats/ascii",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/master/web/docs/understand/formats/ascii.md",tags:[],version:"current",frontMatter:{description:"Typed textual data"},sidebar:"docsSidebar",previous:{title:"Arrow",permalink:"/docs/understand/formats/arrow"},next:{title:"CEF",permalink:"/docs/understand/formats/cef"}},l={},c=[{value:"Output",id:"output",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ascii"},"ASCII"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ascii")," format renders data according to VAST's ",(0,a.kt)("a",{parentName:"p",href:"/docs/understand/language/expressions#values"},"value\nsyntax"),". A value is a data literal that makes easy to infer\nits type. The main value is that it represents a maximally condensend view of\nheterogeneous data. Think of it like NDJSON, but without field names."),(0,a.kt)("p",null,"For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"1.2.3.4")," is an IP address literal, whereas ",(0,a.kt)("inlineCode",{parentName:"p"},'"1.2.3.4"'),"\nis a string literals. Type inference isn't always possible, e.g., in the case of\nempty lists (",(0,a.kt)("inlineCode",{parentName:"p"},"[]"),")."),(0,a.kt)("h2",{id:"output"},"Output"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"export ascii")," to render data in textual form:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"vast export ascii '#type == /.*/'\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'<2011-08-14T05:38:53.914038, 929669869939483, nil, nil, nil, 147.32.84.165, 138, 147.32.84.255, 138, "UDP", "flow", nil, 2, 0, 486, 0, 2011-08-12T12:53:47.928539, 2011-08-12T12:53:47.928552, 0, "new", "timeout", F, "failed">\n<2011-08-12T13:00:36.378914, 269421754201300, 22569, nil, nil, 147.32.84.165, 1027, 74.125.232.202, 80, "TCP", "http", nil, "cr-tools.clients.google.com", "/service/check2?appid=%7B430FD4D0-B729-4F61-AA34-91526481799D%7D&appversion=1.3.21.65&applang=&machine=0&version=1.3.21.65&osversion=5.1&servicepack=Service%20Pack%202", nil, "Google Update/1.3.21.65;winhttp", nil, "GET", nil, "HTTP/1.1", nil, nil, 0, 0>\n')))}d.isMDXComponent=!0}}]);