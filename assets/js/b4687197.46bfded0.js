"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[78155],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=l(n),m=o,f=c["".concat(s,".").concat(m)]||c[m]||u[m]||a;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[c]="string"==typeof e?e:o,i[1]=p;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},71399:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>v,contentTitle:()=>h,default:()=>O,frontMatter:()=>f,metadata:()=>y,toc:()=>k});var r=n(3905),o=Object.defineProperty,a=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,d=(e,t,n)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,c=(e,t)=>{for(var n in t||(t={}))s.call(t,n)&&d(e,n,t[n]);if(p)for(var n of p(t))l.call(t,n)&&d(e,n,t[n]);return e},u=(e,t)=>a(e,i(t)),m=(e,t)=>{var n={};for(var r in e)s.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&p)for(var r of p(e))t.indexOf(r)<0&&l.call(e,r)&&(n[r]=e[r]);return n};const f={},h="python",y={unversionedId:"operators/transformations/python",id:"operators/transformations/python",title:"python",description:"Executes python code against each event of the input.",source:"@site/docs/operators/transformations/python.md",sourceDirName:"operators/transformations",slug:"/operators/transformations/python",permalink:"/next/operators/transformations/python",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/docs/operators/transformations/python.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"put",permalink:"/next/operators/transformations/put"},next:{title:"rare",permalink:"/next/operators/transformations/rare"}},v={},k=[{value:"Synopsis",id:"synopsis",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2}],b={toc:k},g="wrapper";function O(e){var t=e,{components:n}=t,o=m(t,["components"]);return(0,r.kt)(g,u(c(c({},b),o),{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",c({},{id:"python"}),"python"),(0,r.kt)("p",null,"Executes python code against each event of the input."),(0,r.kt)("admonition",c({},{title:"Experimental",type:"caution"}),(0,r.kt)("p",{parentName:"admonition"},"This operator is considered experimental."),(0,r.kt)("p",{parentName:"admonition"},"Its intended purpose is fast, interactive experimentation on small datasets.\nIt was not optimized or intended for fast performance. In particular, it incurs\na heavy pre-processing cost per event in addition to the unavoidable python\ninterpreter overhead, and will likely run into limitations for larger workloads.")),(0,r.kt)("h2",c({},{id:"synopsis"}),"Synopsis"),(0,r.kt)("pre",null,(0,r.kt)("code",c({parentName:"pre"},{}),"python [--requirements=<string>] <code>\n")),(0,r.kt)("h2",c({},{id:"requirements"}),"Requirements"),(0,r.kt)("p",null,"A Python 3 (>=3.10) interpreter must be present on the ",(0,r.kt)("inlineCode",{parentName:"p"},"PATH"),". If the operator\ninstance is located in a tenzir-node, the ",(0,r.kt)("inlineCode",{parentName:"p"},"PATH")," environment variable of the\nnode is used."),(0,r.kt)("h2",c({},{id:"description"}),"Description"),(0,r.kt)("p",null,"This operator executes user-provided python code against each event of the input."),(0,r.kt)("p",null,"The code describes an event-for-event transformation, ie. it is executed once for\neach input event and produces exactly output event."),(0,r.kt)("p",null,"An implicitly defined ",(0,r.kt)("inlineCode",{parentName:"p"},"self")," variable represents the event. Modify it to alter the\noutput of the operator. Fields of the event can be accessed with the dot notation.\nFor example, if the input event contains fields ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"b")," then the python code\ncan access and modify them using ",(0,r.kt)("inlineCode",{parentName:"p"},"self.a")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"self.b"),". Similarly, new fields are\nadded by assigning to ",(0,r.kt)("inlineCode",{parentName:"p"},"self.fieldname")," and existing fields can be removed by deleting\nthem from ",(0,r.kt)("inlineCode",{parentName:"p"},"self"),". When new fields are added, it is required that the new field has\nthe same type for every row of the event."),(0,r.kt)("p",null,"By default, the tenzir node executing the pipeline creates a virtual environment\ninto which the ",(0,r.kt)("inlineCode",{parentName:"p"},"pytenzir")," package is installed. This behavior can be turned off\nin the node configuration using the ",(0,r.kt)("inlineCode",{parentName:"p"},"plugin.python.create-venvs")," boolean option."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"--requirements")," flag can be used to pass additional package dependencies in\nthe pip format. When it is used, the argument is passed on to ",(0,r.kt)("inlineCode",{parentName:"p"},"pip install")," in a\ndedicated virtual environment."),(0,r.kt)("h2",c({},{id:"examples"}),"Examples"),(0,r.kt)("p",null,"Insert or modify the field ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),' and set it to the string value "hello, world":'),(0,r.kt)("pre",null,(0,r.kt)("code",c({parentName:"pre"},{}),"python 'self.x = \"hello, world\"'\n")),(0,r.kt)("p",null,"Clear the contents ",(0,r.kt)("inlineCode",{parentName:"p"},"out")," to remove the implicit input values from the output:"),(0,r.kt)("pre",null,(0,r.kt)("code",c({parentName:"pre"},{}),"python '\n  self.clear()\n  self.x = 23\n'\n")),(0,r.kt)("p",null,"Define a new field ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," as the square root of the field ",(0,r.kt)("inlineCode",{parentName:"p"},"y"),", and remove ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," from the output:"),(0,r.kt)("pre",null,(0,r.kt)("code",c({parentName:"pre"},{}),"python '\n  import math\n  self.x = math.sqrt(self.y)\n  del self.y\n'\n")),(0,r.kt)("p",null,"Make use of third party packages:"),(0,r.kt)("pre",null,(0,r.kt)("code",c({parentName:"pre"},{}),'python --requirements "requests=^2.30" \'\n  import requests\n  requests.post("http://imaginary.api/receive", data=self)\n\'\n')))}O.isMDXComponent=!0}}]);