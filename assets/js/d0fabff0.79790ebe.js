"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6244],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(a),d=r,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||o;return a?n.createElement(h,l(l({ref:t},p),{},{components:a})):n.createElement(h,l({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(67294),r=a(86010);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:a},t)}},74866:(e,t,a)=>{a.d(t,{Z:()=>T});var n=a(87462),r=a(67294),o=a(86010),l=a(12466),i=a(16550),s=a(91980),u=a(67392),p=a(50012);function c(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function m(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??c(a);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function d(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:a}=e;const n=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(n.location.search);t.set(o,e),n.replace({...n.location,search:t.toString()})}),[o,n])]}function y(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,o=m(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[s,u]=h({queryString:a,groupId:n}),[c,y]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,o]=(0,p.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:n}),f=(()=>{const e=s??c;return d({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),y(e)}),[u,y,o]),tabValues:o}}var f=a(72389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:a,selectedValue:i,selectValue:s,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),m=e=>{const t=e.currentTarget,a=p.indexOf(t),n=u[a].value;n!==i&&(c(t),s(n))},d=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const a=p.indexOf(e.currentTarget)+1;t=p[a]??p[0];break}case"ArrowLeft":{const a=p.indexOf(e.currentTarget)-1;t=p[a]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>p.push(e),onKeyDown:d,onClick:m},l,{className:(0,o.Z)("tabs__item",b.tabItem,l?.className,{"tabs__item--active":i===t})}),a??t)})))}function g(e){let{lazy:t,children:a,selectedValue:n}=e;if(a=Array.isArray(a)?a:[a],t){const e=a.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function k(e){const t=y(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",b.tabList)},r.createElement(v,(0,n.Z)({},e,t)),r.createElement(g,(0,n.Z)({},e,t)))}function T(e){const t=(0,f.Z)();return r.createElement(k,(0,n.Z)({key:String(t)},e))}},9848:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>u,toc:()=>c});var n=a(87462),r=(a(67294),a(3905)),o=a(74866),l=a(85162);const i={},s="Python",u={unversionedId:"use/integrate/python",id:"use/integrate/python",title:"Python",description:"VAST ships with Python bindings to enable interaction with VAST in the Python",source:"@site/docs/use/integrate/python.md",sourceDirName:"use/integrate",slug:"/use/integrate/python",permalink:"/docs/use/integrate/python",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/master/web/docs/use/integrate/python.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"REST API",permalink:"/docs/use/integrate/rest-api/"},next:{title:"Threat Bus",permalink:"/docs/use/integrate/threatbus/"}},p={},c=[{value:"Install the PyPI package",id:"install-the-pypi-package",level:2},{value:"Use PyVAST",id:"use-pyvast",level:2},{value:"Import a log file",id:"import-a-log-file",level:3},{value:"Run a query",id:"run-a-query",level:3},{value:"Use PyVAST as module",id:"use-pyvast-as-module",level:2}],m={toc:c},d="wrapper";function h(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"python"},"Python"),(0,r.kt)("p",null,"VAST ships with Python bindings to enable interaction with VAST in the Python\necosystem. We distribute the bindings as ",(0,r.kt)("a",{parentName:"p",href:"https://pypi.org/project/pyvast/"},"PyPI\npackage")," called\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tenzir/vast/tree/master/pyvast"},"PyVAST"),"."),(0,r.kt)("h2",{id:"install-the-pypi-package"},"Install the PyPI package"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"pip")," to install PyVAST:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install pyvast\n")),(0,r.kt)("h2",{id:"use-pyvast"},"Use PyVAST"),(0,r.kt)("p",null,"PyVAST has a ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/asyncio.html"},"asyncio"),"-based\nwrapper around VAST's command line interface that uses fluent method chaining.\nPyVAST supports all VAST commands by passing arguments to the ",(0,r.kt)("inlineCode",{parentName:"p"},"vast")," exectuable."),(0,r.kt)("p",null,"Every command line invocation has an equivalent Python-native\ninvocation of chained (sub-)commands via the ",(0,r.kt)("inlineCode",{parentName:"p"},"."),"-notation. You can pass\narguments as via Python's ",(0,r.kt)("inlineCode",{parentName:"p"},"*args")," and parameters as ",(0,r.kt)("inlineCode",{parentName:"p"},"**kwargs"),". When you are\ndone chaining methods, finalize the command invocation with a call to ",(0,r.kt)("inlineCode",{parentName:"p"},".exec()"),"."),(0,r.kt)("p",null,"Here are two examples."),(0,r.kt)("h3",{id:"import-a-log-file"},"Import a log file"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Python",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'proc = await vast.import_().zeek(read="/path/to/file").exec()\nstdout, stderr = await proc.communicate()\nprint(stdout)\n')),(0,r.kt)("p",null,"NB: since ",(0,r.kt)("inlineCode",{parentName:"p"},"import")," is a reserved keyword, we add ",(0,r.kt)("inlineCode",{parentName:"p"},"_")," as suffix.")),(0,r.kt)(l.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"vast import --read=/path/to/file zeek\n")))),(0,r.kt)("h3",{id:"run-a-query"},"Run a query"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Python",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'proc = await vast.export(max_events=10).json("192.167.1.102").exec()\nstdout, stderr = await proc.communicate()\nprint(stdout)\n'))),(0,r.kt)(l.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"vast export --max-events=10 json 192.168.1.104\n")))),(0,r.kt)("h2",{id:"use-pyvast-as-module"},"Use PyVAST as module"),(0,r.kt)("p",null,"You can use PyVAST as Python module:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"from pyvast import VAST\n")),(0,r.kt)("p",null,"Once imported, there are three optional keyword arguments to instruct PyVAST\nwith:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"binary")," (default: ",(0,r.kt)("inlineCode",{parentName:"p"},"vast"),"): the path to the VAST executable. In case the\nVAST binary is not in your ",(0,r.kt)("inlineCode",{parentName:"p"},"$PATH"),", set this to the actual path to the VAST\nbinary.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"endpoint")," (default: ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost:42000"),"): the endpoint of the VAST node.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"logger")," (optional): a custom ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/logging.html#logger-objects"},"logging.logger")," object for your\napplication."))),(0,r.kt)("p",null,"The following example shows a minimalistic working example with all required\nimport statements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'#!/usr/bin/env python3\n\nimport asyncio\nfrom pyvast import VAST\n\nasync def example():\n  vast = VAST(binary="/opt/vast/bin/vast")\n  await vast.test_connection()\n\n  proc = await vast.export(max_events=10).json("192.168.1.103").exec()\n  stdout, stderr = await proc.communicate()\n  print(stdout)\n\nasyncio.run(example())\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tenzir/vast/tree/master/pyvast/example"},"PyVAST example directory")," illustrates another use case involving\nreading data via Arrow and running a continuous query."))}h.isMDXComponent=!0}}]);