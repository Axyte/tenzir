"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6075],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},57220:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={},i="Run",s={unversionedId:"use/run/README",id:"use/run/README",title:"Run",description:"Running VAST means spawning a process of the vast executable. A VAST process",source:"@site/docs/use/run/README.md",sourceDirName:"use/run",slug:"/use/run/",permalink:"/docs/use/run/",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/master/web/docs/use/run/README.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Use",permalink:"/docs/use/"},next:{title:"Ingest",permalink:"/docs/use/ingest/"}},l={},c=[{value:"Start a server",id:"start-a-server",level:2},{value:"Stop a server",id:"stop-a-server",level:2},{value:"Spawn a client",id:"spawn-a-client",level:2},{value:"Client connection failure",id:"client-connection-failure",level:2}],p={toc:c};function u(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"run"},"Run"),(0,a.kt)("p",null,"Running VAST means spawning a process of the ",(0,a.kt)("inlineCode",{parentName:"p"},"vast")," executable. A VAST process\ncan operate in two modes:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Server"),": runs continuously and listens on a network socket accepting\nconnections."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Client"),": connects to the server to (1) submit a request and receive a\nresponse, (2) publish data, or (3) subscribe to data.")),(0,a.kt)("admonition",{title:"VAST Node",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"A server contains a special component called the ",(0,a.kt)("em",{parentName:"p"},"node")," that acts as container\nfor pluggable components implemented as\n",(0,a.kt)("a",{parentName:"p",href:"/docs/understand/architecture/actor-model"},"actors"),". In the future, VAST\nwill be able to connect multiple nodes together to create a distributed system.")),(0,a.kt)("p",null,"A standard deployment consists of a server close to the data sources and\nmultiple clients that publish events and submit queries:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Client &amp; Server",src:n(67907).Z+"#gh-light-mode-only",width:"1440",height:"480"}),"\n",(0,a.kt)("img",{alt:"Client &amp; Server",src:n(62369).Z+"#gh-dark-mode-only",width:"1440",height:"480"})),(0,a.kt)("h2",{id:"start-a-server"},"Start a server"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," command spins up a VAST server that blocks until told to\n",(0,a.kt)("a",{parentName:"p",href:"#stop-a-server"},"stop"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"vast start\n")),(0,a.kt)("p",null,"By default, a VAST server listens on localhost and TCP port 42000."),(0,a.kt)("p",null,"Usually you would invoke ",(0,a.kt)("inlineCode",{parentName:"p"},"vast start")," only for testing purposes in a terminal.\nIn production you would typically use a service manager, e.g., ",(0,a.kt)("a",{parentName:"p",href:"/docs/setup/install/linux#systemd"},"systemd on\nLinux"),"."),(0,a.kt)("h2",{id:"stop-a-server"},"Stop a server"),(0,a.kt)("p",null,"There exist 3 ways stop a server:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Hit CTRL+C in the same TTY where you started VAST."),(0,a.kt)("li",{parentName:"ol"},"Send the process a SIGINT or SIGTERM signal, e.g., via ",(0,a.kt)("inlineCode",{parentName:"li"},"pkill -2 vast"),".\nSending VAST a SIGTERM is the same as (1)."),(0,a.kt)("li",{parentName:"ol"},"Run ",(0,a.kt)("inlineCode",{parentName:"li"},"vast stop"),".")),(0,a.kt)("p",null,"Option (3) comes in handy when you are working with a remote VAST server."),(0,a.kt)("h2",{id:"spawn-a-client"},"Spawn a client"),(0,a.kt)("p",null,"Every command except for ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," is a client command that interacts with a\nserver. Run ",(0,a.kt)("inlineCode",{parentName:"p"},"vast help")," for a list of available commands."),(0,a.kt)("p",null,"To select a specific VAST server to connect to,\n",(0,a.kt)("a",{parentName:"p",href:"/docs/setup/configure"},"configure")," the endpoint, e.g., by providing\n",(0,a.kt)("inlineCode",{parentName:"p"},"--endpoint=host:port")," on the command line, exporting the environment variable\n",(0,a.kt)("inlineCode",{parentName:"p"},"VAST_ENDPOINT=host:port"),", or setting the configuration option\n",(0,a.kt)("inlineCode",{parentName:"p"},"vast.endpoint: host:port")," in your ",(0,a.kt)("inlineCode",{parentName:"p"},"vast.yaml"),"."),(0,a.kt)("h2",{id:"client-connection-failure"},"Client connection failure"),(0,a.kt)("p",null,"In the event of a connection failure, the clients will try to reconnect.\nThis process can be tuned by the two options in the configuration file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"vast:\n  # The timeout for connecting to a VAST server. Set to 0 seconds to wait\n  # indefinitely.\n  connection-timeout: 5m\n\n  # The delay between two connection attempts. Set to 0 to try connecting\n  # without retries.\n  connection-retry-delay: 3s\n")))}u.isMDXComponent=!0},62369:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/run.dark-1b7ea51ddabd1c4c4057d5a6b82a70ff.png"},67907:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/run.light-c40f8ef83099fc8d4e08642cde14c27c.png"}}]);