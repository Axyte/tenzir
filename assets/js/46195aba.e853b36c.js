"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9370],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,f=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(f,o(o({ref:t},s),{},{components:n})):a.createElement(f,o({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[m]="string"==typeof e?e:r,o[1]=p;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},66810:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>k,default:()=>b,frontMatter:()=>f,metadata:()=>h,toc:()=>y});var a=n(3905),r=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,s=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,m=(e,t)=>{for(var n in t||(t={}))l.call(t,n)&&s(e,n,t[n]);if(p)for(var n of p(t))c.call(t,n)&&s(e,n,t[n]);return e},d=(e,t)=>i(e,o(t)),u=(e,t)=>{var n={};for(var a in e)l.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&p)for(var a of p(e))t.indexOf(a)<0&&c.call(e,a)&&(n[a]=e[a]);return n};const f={description:"Raw network traffic in PCAP form"},k="PCAP",h={unversionedId:"understand/formats/pcap",id:"version-v3.0.0/understand/formats/pcap",title:"PCAP",description:"Raw network traffic in PCAP form",source:"@site/versioned_docs/version-v3.0.0/understand/formats/pcap.md",sourceDirName:"understand/formats",slug:"/understand/formats/pcap",permalink:"/docs/understand/formats/pcap",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/main/web/versioned_docs/version-v3.0.0/understand/formats/pcap.md",tags:[],version:"v3.0.0",frontMatter:{description:"Raw network traffic in PCAP form"},sidebar:"docsSidebar",previous:{title:"NetFlow",permalink:"/docs/understand/formats/netflow"},next:{title:"Suricata",permalink:"/docs/understand/formats/suricata"}},g={},y=[{value:"Parser",id:"parser",level:2},{value:"Real-World Traffic Replay",id:"real-world-traffic-replay",level:3},{value:"Flow Management",id:"flow-management",level:3},{value:"Printer",id:"printer",level:2},{value:"Extract packets in a specific time range",id:"extract-packets-in-a-specific-time-range",level:3},{value:"Extract packets matching IPs and ports",id:"extract-packets-matching-ips-and-ports",level:3},{value:"Extract packets matching VLAN IDs",id:"extract-packets-matching-vlan-ids",level:3},{value:"Extract packet matching a Community ID",id:"extract-packet-matching-a-community-id",level:3}],v={toc:y},N="wrapper";function b(e){var t=e,{components:n}=t,r=u(t,["components"]);return(0,a.kt)(N,d(m(m({},v),r),{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",m({},{id:"pcap"}),"PCAP"),(0,a.kt)("p",null,"VAST supports reading and writing ",(0,a.kt)("a",m({parentName:"p"},{href:"http://www.tcpdump.org"}),"PCAP")," traces via\n",(0,a.kt)("inlineCode",{parentName:"p"},"libpcap"),"."),(0,a.kt)("h2",m({},{id:"parser"}),"Parser"),(0,a.kt)("p",null,"On the read path, VAST can either acquire packets from a trace file or in ",(0,a.kt)("em",{parentName:"p"},"live\nmode")," from a network interface."),(0,a.kt)("p",null,"While decapsulating packets, VAST extracts\n",(0,a.kt)("a",m({parentName:"p"},{href:"https://en.wikipedia.org/wiki/IEEE_802.1Q"}),"802.1Q")," VLAN tags into the nested\n",(0,a.kt)("inlineCode",{parentName:"p"},"vlan")," record, consisting of an ",(0,a.kt)("inlineCode",{parentName:"p"},"outer")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"inner")," field for the respective\ntags. The value of the VLAN tag corresponds to the 12-bit VLAN identifier (VID).\nSpecial values include ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," (frame does not carry a VLAN ID) and ",(0,a.kt)("inlineCode",{parentName:"p"},"0xFFF"),"\n(reserved value; sometimes wildcard match)."),(0,a.kt)("p",null,"In addition, VAST computes the ",(0,a.kt)("a",m({parentName:"p"},{href:"https://github.com/corelight/community-id-spec"}),"Community\nID")," per packet to support\npivoting from other log data. The packet record contains a field ",(0,a.kt)("inlineCode",{parentName:"p"},"community_id"),"\nthat represents the string representation of the Community ID, e.g.,\n",(0,a.kt)("inlineCode",{parentName:"p"},"1:wCb3OG7yAFWelaUydu0D+125CLM="),". If you prefer to not have the Community ID in\nyour data, add the option ",(0,a.kt)("inlineCode",{parentName:"p"},"--disable-community-id")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"pcap")," command."),(0,a.kt)("p",null,"To ingest a PCAP file ",(0,a.kt)("inlineCode",{parentName:"p"},"input.trace"),", pass it to the ",(0,a.kt)("inlineCode",{parentName:"p"},"pcap")," command on standard\ninput:"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-bash"}),"vast import pcap < input.trace\n")),(0,a.kt)("p",null,"You can also acquire packets by listening on an interface:"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-bash"}),"vast import pcap -i eth0\n")),(0,a.kt)("h3",m({},{id:"real-world-traffic-replay"}),"Real-World Traffic Replay"),(0,a.kt)("p",null,'When reading PCAP data from a trace, VAST processes packets directly one after\nanother. This differs from live packet capturing where there exists natural\ninter-packet arrival times, according to the network traffic pattern. To emulate\n"real-world" trace replay, VAST supports a ',(0,a.kt)("em",{parentName:"p"},"pseudo-realtime")," mode, which works\nby introducing inter-packet delays according to the difference between subsquent\npacket timestamps."),(0,a.kt)("p",null,"The option ",(0,a.kt)("inlineCode",{parentName:"p"},"--pseudo-realtime"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"-p")," takes a positive integer ",(0,a.kt)("em",{parentName:"p"},"c")," to delay\npackets by a factor of ",(0,a.kt)("em",{parentName:"p"},"1/c"),". For example, if the first packet arrives at time\n",(0,a.kt)("em",{parentName:"p"},"t0")," and the next packet at time ",(0,a.kt)("em",{parentName:"p"},"t1"),", then VAST would sleep for time\n",(0,a.kt)("em",{parentName:"p"},"(t1 - t0)/c")," before releasing the second packet. Intuitively, the larger ",(0,a.kt)("em",{parentName:"p"},"c"),"\ngets, the faster the replay takes place."),(0,a.kt)("p",null,"For example, to replay packets as if they arrived in realtime, use ",(0,a.kt)("inlineCode",{parentName:"p"},"-p 1"),". To\nreplay packets twice as fast as they arrived on the NIC, use ",(0,a.kt)("inlineCode",{parentName:"p"},"-p 2"),"."),(0,a.kt)("h3",m({},{id:"flow-management"}),"Flow Management"),(0,a.kt)("p",null,'The PCAP plugin has a few tuning knows for controlling storage of connection\ndata. Naive approaches, such as sampling or using a "snapshot" (',(0,a.kt)("inlineCode",{parentName:"p"},"tcpdump -s"),")\nmake transport-level analysis impractical due to an incomplete byte stream.\nInspired by the ",(0,a.kt)("a",m({parentName:"p"},{href:"http://www.icir.org/vern/papers/time-machine-sigcomm08.pdf"}),"Time Machine"),", the PCAP plugin supports recording only the\nfirst ",(0,a.kt)("em",{parentName:"p"},"N")," bytes of a connection (the ",(0,a.kt)("em",{parentName:"p"},"cutoff"),") and skipping the bulk of the flow\ndata. This allows for recording most connections in their entirety while\nachieving a massive space reduction by forgoing the heavy tail of the traffic\ndistribution."),(0,a.kt)("p",null,"To record only the first 1,024 bytes every connection, pass ",(0,a.kt)("inlineCode",{parentName:"p"},"-c 1024")," as option.\nNot that the cut-off is ",(0,a.kt)("em",{parentName:"p"},"bi-directional"),", i.e., it applies to both the\noriginator and responder TCP streams and a flow gets evicted only after both\nsides have reached their cutoff value."),(0,a.kt)("p",null,"In addition to cutoff configuration, the PCAP plugin has a few other tuning\nparameters. VAST keeps a flow table with per-connection state. The\n",(0,a.kt)("inlineCode",{parentName:"p"},"--max-flows"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"-m")," option specifies an upper bound on the flow table size in\nnumber of connections. After a certain amount of inactivity of a flow,\nthe corresponding state expires. The option ",(0,a.kt)("inlineCode",{parentName:"p"},"--max-flow-age"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"-a")," controls this\ntimeout value. Finally, the frequency of when the flow table expires entries\ncan be controlled via ",(0,a.kt)("inlineCode",{parentName:"p"},"--flow-expiry"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"-e"),"."),(0,a.kt)("h2",m({},{id:"printer"}),"Printer"),(0,a.kt)("p",null,"On the write path, VAST can write packets to a trace file."),(0,a.kt)("admonition",m({},{title:"Writing PCAP traces",type:"info"}),(0,a.kt)("p",{parentName:"admonition"},"VAST can only write PCAP traces for events of type ",(0,a.kt)("inlineCode",{parentName:"p"},"pcap.packet"),". To avoid\nbogus trace file files, VAST automatically appends ",(0,a.kt)("inlineCode",{parentName:"p"},'#type == "pcap.packet"')," to\nevery query expression.")),(0,a.kt)("p",null,"Below are some examples queries the generate PCAP traces. In principle, you can\nalso use other output formats aside from ",(0,a.kt)("inlineCode",{parentName:"p"},"pcap"),". These will render the binary\nPCAP packet representation in the ",(0,a.kt)("inlineCode",{parentName:"p"},"payload")," field."),(0,a.kt)("h3",m({},{id:"extract-packets-in-a-specific-time-range"}),"Extract packets in a specific time range"),(0,a.kt)("p",null,"VAST uses the timestamp from the PCAP header to determine the event time for a\ngiven packet. To query all packets from the last 5 minutes, leverage the ",(0,a.kt)("inlineCode",{parentName:"p"},"time"),"\nfield:"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-bash"}),"vast export pcap 'pcap.packet.time > 5 mins ago' | tcpdump -r - -nl\n")),(0,a.kt)("h3",m({},{id:"extract-packets-matching-ips-and-ports"}),"Extract packets matching IPs and ports"),(0,a.kt)("p",null,"To extract packets matching a combination of the connection 4-tuple, you can\nuse the ",(0,a.kt)("inlineCode",{parentName:"p"},"src"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"dst"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"sport"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"dport")," fields. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-bash"}),"vast export pcap '6.6.6.6 && dport == 5158' | tcpdump -r - -nl\n")),(0,a.kt)("h3",m({},{id:"extract-packets-matching-vlan-ids"}),"Extract packets matching VLAN IDs"),(0,a.kt)("p",null,"VAST extracts outer and inner VLAN IDs from 802.1Q headers. You can query VLAN\nIDs using ",(0,a.kt)("inlineCode",{parentName:"p"},"vlan.outer")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"vlan.inner"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-bash"}),"vast export pcap 'vlan.outer > 0 || vlan.inner in [1, 2, 3]' | tcpdump -r - -nl\n")),(0,a.kt)("p",null,"Special IDs include ",(0,a.kt)("inlineCode",{parentName:"p"},"0x000")," (frame does not carry a VLAN ID) and ",(0,a.kt)("inlineCode",{parentName:"p"},"0xFFF"),"\n(reserved value; sometimes wildcard match). If you would like to check the\npresence of a header, check whether it is null, e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"vlan.outer != null"),"."),(0,a.kt)("h3",m({},{id:"extract-packet-matching-a-community-id"}),"Extract packet matching a Community ID"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"community_id")," field to query all packets belonging to a single flow\nidentified by a Community ID:"),(0,a.kt)("pre",null,(0,a.kt)("code",m({parentName:"pre"},{className:"language-bash"}),"vast export pcap 'community_id == \"1:wCb3OG7yAFWelaUydu0D+125CLM=\"' |\n  tcpdump -r - -nl\n")))}b.isMDXComponent=!0}}]);