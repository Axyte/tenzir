"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2720],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),h=p(n),m=r,u=h["".concat(l,".").concat(m)]||h[m]||c[m]||s;return n?a.createElement(u,i(i({ref:t},d),{},{components:n})):a.createElement(u,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},16658:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const s={title:"The New REST API",authors:["lava","mavam"],date:new Date("2023-01-26T00:00:00.000Z"),image:"/img/rest-api-deployment-single.light.png",tags:["frontend","rest","api","architecture"]},i=void 0,o={permalink:"/blog/the-new-rest-api",source:"@site/blog/the-new-rest-api/index.md",title:"The New REST API",description:"As of v2.4 VAST ships with a new web plugin that",date:"2023-01-26T00:00:00.000Z",formattedDate:"January 26, 2023",tags:[{label:"frontend",permalink:"/blog/tags/frontend"},{label:"rest",permalink:"/blog/tags/rest"},{label:"api",permalink:"/blog/tags/api"},{label:"architecture",permalink:"/blog/tags/architecture"}],readingTime:7.065,hasTruncateMarker:!0,authors:[{name:"Benno Evers",title:"Principal Engineer",url:"https://github.com/lava",email:"benno@tenzir.com",imageURL:"https://github.com/lava.png",key:"lava"},{name:"Matthias Vallentin",title:"Co-Founder & CEO",url:"https://github.com/mavam",email:"matthias@tenzir.com",imageURL:"https://github.com/mavam.png",key:"mavam"}],frontMatter:{title:"The New REST API",authors:["lava","mavam"],date:"2023-01-26T00:00:00.000Z",image:"/img/rest-api-deployment-single.light.png",tags:["frontend","rest","api","architecture"]},nextItem:{title:"Parquet & Feather: Data Engineering Woes",permalink:"/blog/parquet-and-feather-data-engineering-woes"}},l={authorsImageUrls:[void 0,void 0]},p=[{value:"Authentication",id:"authentication",level:2},{value:"TLS Modes",id:"tls-modes",level:2},{value:"Developer Mode",id:"developer-mode",level:3},{value:"Server Mode",id:"server-mode",level:3},{value:"Upstream TLS Mode",id:"upstream-tls-mode",level:3},{value:"Mutual TLS Mode",id:"mutual-tls-mode",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"See what&#39;s inside VAST",id:"see-whats-inside-vast",level:3},{value:"Perform a HTTP health check",id:"perform-a-http-health-check",level:3},{value:"Run a query",id:"run-a-query",level:3}],d={toc:p};function c(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"As of ",(0,r.kt)("a",{parentName:"p",href:"/blog/vast-v2.4"},"v2.4")," VAST ships with a new ",(0,r.kt)("inlineCode",{parentName:"p"},"web")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/understand/architecture/plugins"},"plugin")," that\nprovides a ",(0,r.kt)("a",{parentName:"p",href:"/docs/use/integrate/rest-api"},"REST API"),". The ",(0,r.kt)("a",{parentName:"p",href:"/api"},"API documentation")," describes the\navailable endpoints also provides an\n",(0,r.kt)("a",{parentName:"p",href:"https://spec.openapis.org/oas/latest.html"},"OpenAPI")," spec for download. This\nblog post shows how we built the API and what you can do with it."),(0,r.kt)("p",null,"Why does VAST need a REST API? Two reasons:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Make it easy to integrate with VAST"),". To date, the only interface to VAST\nis the command line. This is great for testing and ad-hoc use cases, but to\nmake it easy for other tools to integrate with VAST, a REST API is the common\nexpectation.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Develop our own web frontend"),". We are in the middle of building a\n",(0,r.kt)("a",{parentName:"p",href:"https://svelte.dev/"},"Svelte")," frontend that delivers a web-based experience\nof interacting with VAST through the browser. This frontend interacts with\nVAST through the REST API."))),(0,r.kt)("p",null,"Two architectural features of VAST made it really smooth to design the REST API:\n",(0,r.kt)("a",{parentName:"p",href:"/docs/understand/architecture/plugins"},"Plugins")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/understand/architecture/actor-model"},"Actors"),"."),(0,r.kt)("p",null,"First, VAST's plugin system offers a flexible extension mechanism to add\nadditional functionality without bloating the core. Specifically, we chose\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Stiffstream/restinio"},"RESTinio")," as C++ library that\nimplements an asynchronous HTTP and WebSocket server. Along with it comes a\ndependency on Boost ASIO. We deem it acceptable to have this dependency of the\n",(0,r.kt)("inlineCode",{parentName:"p"},"web")," plugin, but would feel less comfortable with adding dependencies to the\nVAST core, which we try to keep as lean as possible."),(0,r.kt)("p",null,"Second, the ",(0,r.kt)("a",{parentName:"p",href:"/docs/understand/architecture/actor-model"},"actor model architecture"),' of VAST makes it easy to\nintegrate new "microservices" into the system. The ',(0,r.kt)("inlineCode",{parentName:"p"},"web")," plugin is a ",(0,r.kt)("em",{parentName:"p"},"component\nplugin")," that provides a new actor with a typed messaging interface. It neatly\nfits into the existing architecture and thereby inherits the flexible\ndistribution and scaling properties. Concretely, there exist two ways to run the\nREST API actor: either as a separate process or embedded inside a VAST server\nnode:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"REST API - Single Deployment",src:n(76691).Z+"#gh-light-mode-only",width:"1440",height:"860"}),"\n",(0,r.kt)("img",{alt:"REST API - Single Deployment",src:n(62587).Z+"#gh-dark-mode-only",width:"1440",height:"860"})),(0,r.kt)("p",null,"Running the REST API as dedicated process gives you more flexibility with\nrespect to deployment, fault isolation, and scaling. An embedded setup offers\nhigher throughput and lower latency between the REST API and the other VAST\ncomponents."),(0,r.kt)("p",null,"The REST API is also a ",(0,r.kt)("em",{parentName:"p"},"command plugin")," and exposes the\u2014you guessed it\u2014",(0,r.kt)("inlineCode",{parentName:"p"},"web"),"\ncommand. To run the REST API as dedicated process, spin up a VAST node as\nfollows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"vast web server --certfile=/path/to/server.certificate --keyfile=/path/to/private.key\n")),(0,r.kt)("p",null,"To run the server within the main VAST process, use a ",(0,r.kt)("inlineCode",{parentName:"p"},"start")," command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'vast start --commands="web server [...]"\n')),(0,r.kt)("p",null,"The server will only accept TLS requests by default. To allow clients to connect\nsuccessfully, you need to pass a valid certificate and corresponding private key\nwith the ",(0,r.kt)("inlineCode",{parentName:"p"},"--certfile")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"--keyfile")," arguments."),(0,r.kt)("h2",{id:"authentication"},"Authentication"),(0,r.kt)("p",null,"Clients must authenticate all requests with a valid token. The token is a short\nstring that clients put in the ",(0,r.kt)("inlineCode",{parentName:"p"},"X-VAST-Token")," request header."),(0,r.kt)("p",null,"You can generate a valid token on the command line as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"vast web generate-token\n")),(0,r.kt)("p",null,"For local testing and development, generating suitable certificates and tokens\ncan be a hassle. For this scenario, you can start the server in ",(0,r.kt)("a",{parentName:"p",href:"#developer-mode"},"developer\nmode")," where it accepts plain HTTP connections are does not\nperform token authentication."),(0,r.kt)("h2",{id:"tls-modes"},"TLS Modes"),(0,r.kt)("p",null,"There exist four modes to start the REST API, each of which suits a slightly\ndifferent use case."),(0,r.kt)("h3",{id:"developer-mode"},"Developer Mode"),(0,r.kt)("p",null,"The developer mode bypasses encryption and authentication token verification."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"REST API - Developer Mode",src:n(91827).Z+"#gh-light-mode-only",width:"2520",height:"760"}),"\n",(0,r.kt)("img",{alt:"REST API - Developer Mode",src:n(3515).Z+"#gh-dark-mode-only",width:"2520",height:"760"})),(0,r.kt)("p",null,"Pass ",(0,r.kt)("inlineCode",{parentName:"p"},"--mode=dev")," to start the REST API in developer mode:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"vast web server --mode=dev\n")),(0,r.kt)("h3",{id:"server-mode"},"Server Mode"),(0,r.kt)("p",null,'The server mode reflects the "traditional" mode of operation where VAST binds to\na network interface. This mode only accepts HTTPS connections and requires a\nvalid authentication token for every request. This is the default mode of\noperation.'),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"REST API - Server Mode",src:n(54117).Z+"#gh-light-mode-only",width:"2520",height:"1040"}),"\n",(0,r.kt)("img",{alt:"REST API - Server Mode",src:n(84174).Z+"#gh-dark-mode-only",width:"2520",height:"1040"})),(0,r.kt)("p",null,"Pass ",(0,r.kt)("inlineCode",{parentName:"p"},"--mode=server")," to start the REST API in server mode:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"vast web server --mode=server\n")),(0,r.kt)("h3",{id:"upstream-tls-mode"},"Upstream TLS Mode"),(0,r.kt)("p",null,"The upstream TLS mode is suitable when VAST sits upstream of a separate\nTLS terminator that is running on the same machine. This kind of setup\nis commonly encountered when running nginx as a reverse proxy."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"REST API - TLS Upstream Mode",src:n(27536).Z+"#gh-light-mode-only",width:"2520",height:"1040"}),"\n",(0,r.kt)("img",{alt:"REST API - TLS Upstream Mode",src:n(99662).Z+"#gh-dark-mode-only",width:"2520",height:"1040"})),(0,r.kt)("p",null,"VAST only listens on localhost addresses, accepts plain HTTP but still\nchecks authentication tokens."),(0,r.kt)("p",null,"Pass ",(0,r.kt)("inlineCode",{parentName:"p"},"--mode=upstream")," to start the REST API in server mode:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"vast web server --mode=upstream\n")),(0,r.kt)("h3",{id:"mutual-tls-mode"},"Mutual TLS Mode"),(0,r.kt)("p",null,"The mutual TLS mode is suitable when VAST sits upstream of a separate TLS\nterminator that may be running on a different machine. In this scenario,\nthe connection between the terminator and VAST must again be encrypted\nto avoid leaking the authentication token to the network."),(0,r.kt)("p",null,"Regular TLS requires only the server to present a certificate to prove his\nidentity. In mutual TLS mode, the client additionally needs to provide a\nvalid ",(0,r.kt)("em",{parentName:"p"},"client certificate")," to the server. This ensures that the TLS terminator\ncannot be impersonated or bypassed."),(0,r.kt)("p",null,"Typically self-signed certificates are used for that purpose, since both ends of\nthe connection are configured together and not exposed to the public internet."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"REST API - Mutual TLS Mode",src:n(82463).Z+"#gh-light-mode-only",width:"2520",height:"1040"}),"\n",(0,r.kt)("img",{alt:"REST API - Mutual TLS Mode",src:n(75929).Z+"#gh-dark-mode-only",width:"2520",height:"1040"})),(0,r.kt)("p",null,"Pass ",(0,r.kt)("inlineCode",{parentName:"p"},"--mode=mtls")," to start the REST API in mutual TLS mode:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"vast web server --mode=mtls\n")),(0,r.kt)("h2",{id:"usage-examples"},"Usage Examples"),(0,r.kt)("p",null,"Now that you know how we put the REST API together, let's look at some\nend-to-end examples."),(0,r.kt)("h3",{id:"see-whats-inside-vast"},"See what's inside VAST"),(0,r.kt)("p",null,"One straightforward example is checking the number of records in VAST:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl "https://vast.example.org:42001/api/v0/status?verbosity=detailed" \\\n  | jq .index.statistics\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "events": {\n    "total": 8462\n  },\n  "layouts": {\n    "zeek.conn": {\n      "count": 8462,\n      "percentage": 100\n    }\n  }\n}\n')),(0,r.kt)("admonition",{title:"Status changes in v3.0",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"In the upcoming v3.0 release, the statistics under the key ",(0,r.kt)("inlineCode",{parentName:"p"},".index.statistics"),"\nwill move to ",(0,r.kt)("inlineCode",{parentName:"p"},".catalog"),". This change is already merged into the master branch.\nConsult the ",(0,r.kt)("a",{parentName:"p",href:"/docs/setup/monitor#reference"},"status key reference")," for details.")),(0,r.kt)("h3",{id:"perform-a-http-health-check"},"Perform a HTTP health check"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"/status")," endpoint can also be used as a HTTP health check in\n",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'version: \'3.4\'\nservices:\n  web:\n    image: tenzir/vast\n    environment:\n      - "VAST_START__COMMANDS=web server --mode=dev"\n    ports:\n      - "42001:42001"\n    healthcheck:\n      test: curl --fail http://localhost:42001/status || exit 1\n      interval: 60s\n      retries: 5\n      start_period: 20s\n      timeout: 10s\n')),(0,r.kt)("h3",{id:"run-a-query"},"Run a query"),(0,r.kt)("p",null,"The other initial endpoints can be used to get data out of VAST. For example, to\nget up to two ",(0,r.kt)("inlineCode",{parentName:"p"},"zeek.conn")," events which connect to the subnet ",(0,r.kt)("inlineCode",{parentName:"p"},"192.168.0.0/16"),", using\nthe VAST query expression ",(0,r.kt)("inlineCode",{parentName:"p"},"net.src.ip in 192.168.0.0/16"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl "http://127.0.0.1:42001/api/v0/export?limit=2&expression=net.src.ip%20in%20192.168.0.0%2f16"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "version": "v2.4.0-457-gb35c25d88a",\n  "num_events": 2,\n  "events": [\n    {\n      "ts": "2009-11-18T08:00:21.486539",\n      "uid": "Pii6cUUq1v4",\n      "id.orig_h": "192.168.1.102",\n      "id.orig_p": 68,\n      "id.resp_h": "192.168.1.1",\n      "id.resp_p": 67,\n      "proto": "udp",\n      "service": null,\n      "duration": "163.82ms",\n      "orig_bytes": 301,\n      "resp_bytes": 300,\n      "conn_state": "SF",\n      "local_orig": null,\n      "missed_bytes": 0,\n      "history": "Dd",\n      "orig_pkts": 1,\n      "orig_ip_bytes": 329,\n      "resp_pkts": 1,\n      "resp_ip_bytes": 328,\n      "tunnel_parents": []\n    },\n    {\n      "ts": "2009-11-18T08:08:00.237253",\n      "uid": "nkCxlvNN8pi",\n      "id.orig_h": "192.168.1.103",\n      "id.orig_p": 137,\n      "id.resp_h": "192.168.1.255",\n      "id.resp_p": 137,\n      "proto": "udp",\n      "service": "dns",\n      "duration": "3.78s",\n      "orig_bytes": 350,\n      "resp_bytes": 0,\n      "conn_state": "S0",\n      "local_orig": null,\n      "missed_bytes": 0,\n      "history": "D",\n      "orig_pkts": 7,\n      "orig_ip_bytes": 546,\n      "resp_pkts": 0,\n      "resp_ip_bytes": 0,\n      "tunnel_parents": []\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"Note that when using ",(0,r.kt)("inlineCode",{parentName:"p"},"curl"),", all request parameters need to be properly\nurlencoded. This can be cumbersome for the ",(0,r.kt)("inlineCode",{parentName:"p"},"expression")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"pipeline"),"\nparameters, so we also provide an ",(0,r.kt)("inlineCode",{parentName:"p"},"/export")," POST endpoint that accepts\nparameters in the JSON body. The next example shows how to use POST requests\nfrom curl. It also uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"/query")," endpoint instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"/export")," to get\nresults iteratively instead of a one-shot result. The cost for this is having to\nmake two API calls instead of one:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -XPOST -H"Content-Type: application/json" -d\'{"expression": "udp"}\' http://127.0.0.1:42001/api/v0/query/new\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"id": "31cd0f6c-915f-448e-b64a-b5ab7aae2474"}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://127.0.0.1:42001/api/v0/query/31cd0f6c-915f-448e-b64a-b5ab7aae2474/next?n=2 | jq\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "position": 0,\n  "events": [\n    {\n      "ts": "2009-11-18T08:00:21.486539",\n      "uid": "Pii6cUUq1v4",\n      "id.orig_h": "192.168.1.102",\n      "id.orig_p": 68,\n      "id.resp_h": "192.168.1.1",\n      "id.resp_p": 67,\n      "proto": "udp",\n      "service": null,\n      "duration": "163.82ms",\n      "orig_bytes": 301,\n      "resp_bytes": 300,\n      "conn_state": "SF",\n      "local_orig": null,\n      "missed_bytes": 0,\n      "history": "Dd",\n      "orig_pkts": 1,\n      "orig_ip_bytes": 329,\n      "resp_pkts": 1,\n      "resp_ip_bytes": 328,\n      "tunnel_parents": []\n    },\n    {\n      "ts": "2009-11-18T08:08:00.237253",\n      "uid": "nkCxlvNN8pi",\n      "id.orig_h": "192.168.1.103",\n      "id.orig_p": 137,\n      "id.resp_h": "192.168.1.255",\n      "id.resp_p": 137,\n      "proto": "udp",\n      "service": "dns",\n      "duration": "3.78s",\n      "orig_bytes": 350,\n      "resp_bytes": 0,\n      "conn_state": "S0",\n      "local_orig": null,\n      "missed_bytes": 0,\n      "history": "D",\n      "orig_pkts": 7,\n      "orig_ip_bytes": 546,\n      "resp_pkts": 0,\n      "resp_ip_bytes": 0,\n      "tunnel_parents": []\n    }\n  ]\n}\n')),(0,r.kt)("admonition",{title:"Still Experimental",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Please note that we consider the API version ",(0,r.kt)("inlineCode",{parentName:"p"},"v0")," experimental, and we make no\nstability guarantees at the moment.")),(0,r.kt)("p",null,"As always, if you have any question on usage, swing by our ",(0,r.kt)("a",{parentName:"p",href:"http://slack.tenzir.com"},"community\nSlack"),". Missing routes? Let us know so that we know\nwhat to prioritize. Now happy curling! \ud83e\udd4c"))}c.isMDXComponent=!0},62587:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/rest-api-deployment-single.dark-eb29cf778bdaa5fb59b1873d68a20b93.png"},76691:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/rest-api-deployment-single.light-fed8e9b8ade35e400f7388eb3c2a32eb.png"},3515:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/rest-api-developer-mode.dark-b3a2f762c379dd0abb1cbbfa203e9276.png"},91827:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/rest-api-developer-mode.light-60766982eb12a297b3deb95c04b80a0b.png"},75929:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/rest-api-mutual-tls-mode.dark-5715245ac8297bd8d817aef8e199e951.png"},82463:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/rest-api-mutual-tls-mode.light-4423e1676c97a32c4c61a876b3785f8c.png"},84174:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/rest-api-server-mode.dark-75b5f073e9d1120888cf08e4aef75a87.png"},54117:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/rest-api-server-mode.light-992a8065cc22f80d79dc06845ef1823f.png"},99662:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/rest-api-tls-upstream-mode.dark-2b198f244c88e65c38422df095f23fe9.png"},27536:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/rest-api-tls-upstream-mode.light-ab147a61386a4edb88a19533338995ed.png"}}]);