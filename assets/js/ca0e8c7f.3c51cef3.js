"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[65259],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=l(n),f=a,m=u["".concat(p,".").concat(f)]||u[f]||d[f]||o;return n?r.createElement(m,c(c({ref:t},s),{},{components:n})):r.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=f;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},83759:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>b,contentTitle:()=>k,default:()=>g,frontMatter:()=>m,metadata:()=>y,toc:()=>v});var r=n(3905),a=Object.defineProperty,o=Object.defineProperties,c=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,s=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&s(e,n,t[n]);if(i)for(var n of i(t))l.call(t,n)&&s(e,n,t[n]);return e},d=(e,t)=>o(e,c(t)),f=(e,t)=>{var n={};for(var r in e)p.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&i)for(var r of i(e))t.indexOf(r)<0&&l.call(e,r)&&(n[r]=e[r]);return n};const m={},k="nic",y={unversionedId:"connectors/nic",id:"connectors/nic",title:"nic",description:"Reads bytes from a network interface card (NIC).",source:"@site/docs/connectors/nic.md",sourceDirName:"connectors",slug:"/connectors/nic",permalink:"/next/connectors/nic",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/docs/connectors/nic.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"kafka",permalink:"/next/connectors/kafka"},next:{title:"stdin",permalink:"/next/connectors/stdin"}},b={},v=[{value:"Synopsis",id:"synopsis",level:2},{value:"Description",id:"description",level:2},{value:"<code>-s|--snaplen &lt;count&gt;</code>",id:"-s--snaplen-count",level:3},{value:"Examples",id:"examples",level:2}],h={toc:v},O="wrapper";function g(e){var t=e,{components:n}=t,a=f(t,["components"]);return(0,r.kt)(O,d(u(u({},h),a),{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",u({},{id:"nic"}),"nic"),(0,r.kt)("p",null,"Reads bytes from a network interface card (NIC)."),(0,r.kt)("h2",u({},{id:"synopsis"}),"Synopsis"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{}),"nic <iface> [-s|--snaplen <count>]\n")),(0,r.kt)("h2",u({},{id:"description"}),"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"nic")," loader uses libpcap to acquire packets from a network interface and\npacks them into blocks of bytes that represent PCAP packet records."),(0,r.kt)("p",null,"The received first packet triggers also emission of PCAP file header such that\ndownstream operators can treat the packet stream as valid PCAP capture file."),(0,r.kt)("p",null,"The default parser for the ",(0,r.kt)("inlineCode",{parentName:"p"},"nic")," loader is ",(0,r.kt)("a",u({parentName:"p"},{href:"/next/formats/pcap"}),(0,r.kt)("inlineCode",{parentName:"a"},"pcap")),"."),(0,r.kt)("h3",u({},{id:"-s--snaplen-count"}),(0,r.kt)("inlineCode",{parentName:"h3"},"-s|--snaplen <count>")),(0,r.kt)("p",null,"Sets the snapshot length of the captured packets."),(0,r.kt)("p",null,"This value is an upper bound on the packet size. Packets larger than this size\nget truncated to ",(0,r.kt)("inlineCode",{parentName:"p"},"<count>")," bytes."),(0,r.kt)("p",null,"Defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"262144"),"."),(0,r.kt)("h2",u({},{id:"examples"}),"Examples"),(0,r.kt)("p",null,"Read PCAP packets from ",(0,r.kt)("inlineCode",{parentName:"p"},"eth0"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{}),"from nic eth0\n")),(0,r.kt)("p",null,"Perform the equivalent of ",(0,r.kt)("inlineCode",{parentName:"p"},"tcpdump -i en0 -w trace.pcap"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{}),"load nic en0 | save file trace.pcap\n")))}g.isMDXComponent=!0}}]);