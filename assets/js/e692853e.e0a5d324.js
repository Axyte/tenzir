"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2129],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>y});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),d=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,y=u["".concat(p,".").concat(m)]||u[m]||c[m]||o;return n?r.createElement(y,i(i({ref:t},l),{},{components:n})):r.createElement(y,i({ref:t},l))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},19194:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=n(87462),a=(n(67294),n(3905));const o={},i="pseudonymize",s={unversionedId:"understand/language/operators/pseudonymize",id:"understand/language/operators/pseudonymize",title:"pseudonymize",description:"Pseudonymizes IP addresses according to a certain method. Currently, VAST only",source:"@site/docs/understand/language/operators/pseudonymize.md",sourceDirName:"understand/language/operators",slug:"/understand/language/operators/pseudonymize",permalink:"/docs/understand/language/operators/pseudonymize",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/master/web/docs/understand/language/operators/pseudonymize.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"pass",permalink:"/docs/understand/language/operators/pass"},next:{title:"rename",permalink:"/docs/understand/language/operators/rename"}},p={},d=[{value:"Synopsis",id:"synopsis",level:2},{value:"Method",id:"method",level:3},{value:"Seed",id:"seed",level:3},{value:"Fields",id:"fields",level:3},{value:"Example",id:"example",level:2},{value:"YAML Syntax Example",id:"yaml-syntax-example",level:2}],l={toc:d},u="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"pseudonymize"},"pseudonymize"),(0,a.kt)("p",null,"Pseudonymizes IP addresses according to a certain method. Currently, VAST only\nuses the ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Crypto-PAn"},"Crypto-PAn")," algorithm."),(0,a.kt)("admonition",{title:"Experimental",type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"We plan to change the ",(0,a.kt)("inlineCode",{parentName:"p"},"pseudonymize")," operator into a function usable in an\nupcoming ",(0,a.kt)("inlineCode",{parentName:"p"},"put")," operator, removing the need for ",(0,a.kt)("inlineCode",{parentName:"p"},"pseudonymize")," as an operator.")),(0,a.kt)("h2",{id:"synopsis"},"Synopsis"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"pseudonymize (-m|--method=STRING) (-s|--seed=STRING) FIELDS[, \u2026]\n")),(0,a.kt)("h3",{id:"method"},"Method"),(0,a.kt)("p",null,"The method to pseudonymize the address. As of now, this value always defaults to\n",(0,a.kt)("inlineCode",{parentName:"p"},"crypto-pan"),"."),(0,a.kt)("h3",{id:"seed"},"Seed"),(0,a.kt)("p",null,"The 64-byte seed that describes a hexadecimal value. When the seed is shorter\nthan 64 bytes, the operator will append zeros to match the size; when it is\nlonger, it will truncate the seed."),(0,a.kt)("h3",{id:"fields"},"Fields"),(0,a.kt)("p",null,"The list of fields to apply the pseudonymization to. During pseudonymization,\nthe operator will ignore specified fields that do not contain IP addresses."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"Pseudonymize all values of the fields ",(0,a.kt)("inlineCode",{parentName:"p"},"ip_origin")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ip_dest")," using the\n",(0,a.kt)("inlineCode",{parentName:"p"},"crypto-pan")," algorithm and ",(0,a.kt)("inlineCode",{parentName:"p"},"deadbeef")," seed:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'pseudonymize --method="crypto-pan" --seed="deadbeef" ip_origin, ip_dest\n')),(0,a.kt)("h2",{id:"yaml-syntax-example"},"YAML Syntax Example"),(0,a.kt)("admonition",{title:"Deprecated",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The YAML syntax is deprecated since VAST v3.0, and will be removed in a future\nrelease. Please use the pipeline syntax instead.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"pseudonymize:\n  method: crypto-pan\n  seed: abcdef1234567890987654321fedcbaabcdef1234567890987654321fedcbaab\n  fields:\n    - ip_origin\n    - ip_dest\n")))}c.isMDXComponent=!0}}]);