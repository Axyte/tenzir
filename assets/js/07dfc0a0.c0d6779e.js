"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[26545],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(r),f=o,m=u["".concat(l,".").concat(f)]||u[f]||c[f]||a;return r?n.createElement(m,i(i({ref:t},d),{},{components:r})):n.createElement(m,i({ref:t},d))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},69434:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>v,contentTitle:()=>b,default:()=>h,frontMatter:()=>m,metadata:()=>y,toc:()=>g});var n=r(3905),o=Object.defineProperty,a=Object.defineProperties,i=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,d=(e,t,r)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,u=(e,t)=>{for(var r in t||(t={}))l.call(t,r)&&d(e,r,t[r]);if(s)for(var r of s(t))p.call(t,r)&&d(e,r,t[r]);return e},c=(e,t)=>a(e,i(t)),f=(e,t)=>{var r={};for(var n in e)l.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&s)for(var n of s(e))t.indexOf(n)<0&&p.call(e,n)&&(r[n]=e[n]);return r};const m={sidebar_position:4},b="User-Defined",y={unversionedId:"understand/operators/user-defined",id:"understand/operators/user-defined",title:"User-Defined",description:"Operator Aliases",source:"@site/docs/understand/operators/user-defined.md",sourceDirName:"understand/operators",slug:"/understand/operators/user-defined",permalink:"/docs/next/understand/operators/user-defined",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/main/web/docs/understand/operators/user-defined.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"write",permalink:"/docs/next/understand/operators/sinks/write"},next:{title:"Modifiers",permalink:"/docs/next/understand/operators/modifier"}},v={},g=[{value:"Operator Aliases",id:"operator-aliases",level:2},{value:"Operator Plugins",id:"operator-plugins",level:2}],w={toc:g},O="wrapper";function h(e){var t=e,{components:r}=t,o=f(t,["components"]);return(0,n.kt)(O,c(u(u({},w),o),{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",u({},{id:"user-defined"}),"User-Defined"),(0,n.kt)("h2",u({},{id:"operator-aliases"}),"Operator Aliases"),(0,n.kt)("p",null,"User-defined operator aliases make pipelines easier to use by enabling users to\nencapsulate pipelines into a new operator."),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-yaml",metastring:'{0} title="vast.yaml"',"{0}":!0,title:'"vast.yaml"'}),'vast:\n  operators:\n    # Aggregate suricata.flow events with matching source and destination IP\n    # addresses.\n    summarize-flows: >\n      where #type == "suricata.flow"\n      | summarize \n          pkts_toserver=sum(flow.pkts_toserver),\n          pkts_toclient=sum(flow.pkts_toclient),\n          bytes_toserver=sum(flow.bytes_toserver),\n          bytes_toclient=sum(flow.bytes_toclient),\n          start=min(flow.start),\n          end=max(flow.end)\n        by\n          src_ip,\n          dest_ip\n')),(0,n.kt)("p",null,"This custom ",(0,n.kt)("inlineCode",{parentName:"p"},"summarize-flows")," operator can now be used in all pipeline\ndefinitions. For example:"),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-c"}),"/* Write all summarized suricata.flow events to stdout as JSON */\nfrom file path/to/eve.json read suricata\n| summarize-flows\n| write json\n")),(0,n.kt)("admonition",u({},{title:"Avoid Recursion",type:"tip"}),(0,n.kt)("p",{parentName:"admonition"},"User-defined operators may not reference themselves, but may reference other\nuser-defined operators. Attempting to use a recursively defined operator in a\npipeline will fail with an error.")),(0,n.kt)("h2",u({},{id:"operator-plugins"}),"Operator Plugins"),(0,n.kt)("p",null,"In addition to aliases, developers can add additional operators to VAST by using\nthe ",(0,n.kt)("a",u({parentName:"p"},{href:"/docs/next/develop/architecture/plugins#operator"}),"operator plugin API"),". This\nallows for writing arbitrarily complex operators in C++ by developing against\n",(0,n.kt)("inlineCode",{parentName:"p"},"libvast"),"."),(0,n.kt)("p",null,"If you want to learn more about building your own operators, we recommend\nstudying ",(0,n.kt)("a",u({parentName:"p"},{href:"https://github.com/tenzir/vast/tree/main/libvast/builtins/operators"}),"VAST's built-in operators"),", which are developed\nagainst the same API."))}h.isMDXComponent=!0}}]);