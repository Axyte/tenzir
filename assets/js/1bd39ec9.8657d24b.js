"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[19789],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),l=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=l(a),m=n,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return a?r.createElement(f,s(s({ref:t},c),{},{components:a})):r.createElement(f,s({ref:t},c))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:n,s[1]=i;for(var l=2;l<o;l++)s[l]=a[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},93759:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>v,contentTitle:()=>h,default:()=>N,frontMatter:()=>f,metadata:()=>y,toc:()=>k});var r=a(3905),n=Object.defineProperty,o=Object.defineProperties,s=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,c=(e,t,a)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,d=(e,t)=>{for(var a in t||(t={}))p.call(t,a)&&c(e,a,t[a]);if(i)for(var a of i(t))l.call(t,a)&&c(e,a,t[a]);return e},u=(e,t)=>o(e,s(t)),m=(e,t)=>{var a={};for(var r in e)p.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&i)for(var r of i(e))t.indexOf(r)<0&&l.call(e,r)&&(a[r]=e[r]);return a};const f={},h="suricata",y={unversionedId:"understand/formats/suricata",id:"understand/formats/suricata",title:"suricata",description:"Reads Suricata's EVE JSON output. The parser is an alias",source:"@site/docs/understand/formats/suricata.md",sourceDirName:"understand/formats",slug:"/understand/formats/suricata",permalink:"/docs/next/understand/formats/suricata",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/main/web/docs/understand/formats/suricata.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"ssv",permalink:"/docs/next/understand/formats/ssv"},next:{title:"tsv",permalink:"/docs/next/understand/formats/tsv"}},v={},k=[{value:"Synopsis",id:"synopsis",level:2},{value:"Description",id:"description",level:2},{value:"Parser",id:"parser",level:2},{value:"Read from a UNIX domain socket",id:"read-from-a-unix-domain-socket",level:3}],g={toc:k},b="wrapper";function N(e){var t=e,{components:a}=t,n=m(t,["components"]);return(0,r.kt)(b,u(d(d({},g),n),{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",d({},{id:"suricata"}),"suricata"),(0,r.kt)("p",null,"Reads ",(0,r.kt)("a",d({parentName:"p"},{href:"https://suricata.io"}),"Suricata"),"'s ",(0,r.kt)("a",d({parentName:"p"},{href:"https://suricata.readthedocs.io/en/latest/output/eve/eve-json-output.html"}),"EVE JSON")," output. The parser is an alias\nfor ",(0,r.kt)("a",d({parentName:"p"},{href:"/docs/next/understand/formats/json"}),(0,r.kt)("inlineCode",{parentName:"a"},"json"))," with the option ",(0,r.kt)("inlineCode",{parentName:"p"},"--selector=event_type:suricata"),"."),(0,r.kt)("h2",d({},{id:"synopsis"}),"Synopsis"),(0,r.kt)("pre",null,(0,r.kt)("code",d({parentName:"pre"},{}),"suricata\n")),(0,r.kt)("h2",d({},{id:"description"}),"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",d({parentName:"p"},{href:"https://suricata.io"}),"Suricata")," network security monitor converts network\ntraffic into a stream of metadata events and provides a rule matching engine to\ngenerate alerts. Suricata emits events in the ",(0,r.kt)("a",d({parentName:"p"},{href:"https://suricata.readthedocs.io/en/latest/output/eve/eve-json-output.html"}),"EVE JSON")," format. The\noutput is a single stream of events where the ",(0,r.kt)("inlineCode",{parentName:"p"},"event_type")," field disambiguates\nthe event type."),(0,r.kt)("p",null,"VAST's ",(0,r.kt)("a",d({parentName:"p"},{href:"/docs/next/understand/formats/json"}),(0,r.kt)("inlineCode",{parentName:"a"},"json"))," can handle EVE JSON correctly, but for the schema names\nto match the value from the ",(0,r.kt)("inlineCode",{parentName:"p"},"event_type")," field, we need to pass the option\n",(0,r.kt)("inlineCode",{parentName:"p"},"--selector=event_type:suricata"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"suricata")," parser does this by default."),(0,r.kt)("p",null,"The default loader for the ",(0,r.kt)("inlineCode",{parentName:"p"},"suricata")," parser is\n",(0,r.kt)("a",d({parentName:"p"},{href:"/docs/next/understand/connectors/stdin"}),(0,r.kt)("inlineCode",{parentName:"a"},"stdin")),"."),(0,r.kt)("h2",d({},{id:"parser"}),"Parser"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"import suricata")," command format consumes EVE JSON logs. The command\ndemultiplexes the JSON stream according to the ",(0,r.kt)("inlineCode",{parentName:"p"},"event_type")," field."),(0,r.kt)("p",null,"Here's an ",(0,r.kt)("inlineCode",{parentName:"p"},"eve.log")," sample:"),(0,r.kt)("pre",null,(0,r.kt)("code",d({parentName:"pre"},{className:"language-json"}),'{"timestamp":"2011-08-12T14:52:57.716360+0200","flow_id":1031464864740687,"pcap_cnt":83,"event_type":"alert","src_ip":"147.32.84.165","src_port":1181,"dest_ip":"78.40.125.4","dest_port":6667,"proto":"TCP","alert":{"action":"allowed","gid":1,"signature_id":2017318,"rev":4,"signature":"ET CURRENT_EVENTS SUSPICIOUS IRC - PRIVMSG *.(exe|tar|tgz|zip)  download command","category":"Potentially Bad Traffic","severity":2},"flow":{"pkts_toserver":27,"pkts_toclient":35,"bytes_toserver":2302,"bytes_toclient":4520,"start":"2011-08-12T14:47:24.357711+0200"},"payload":"UFJJVk1TRyAjemFyYXNhNDggOiBzbXNzLmV4ZSAoMzY4KQ0K","payload_printable":"PRIVMSG #zarasa48 : smss.exe (368)\\r\\n","stream":0,"packet":"AB5J2xnDCAAntbcZCABFAABMGV5AAIAGLlyTIFSlTih9BASdGgvw0QvAxUWHdVAY+rCL4gAAUFJJVk1TRyAjemFyYXNhNDggOiBzbXNzLmV4ZSAoMzY4KQ0K","packet_info":{"linktype":1}}\n{"timestamp":"2011-08-12T14:55:22.154618+0200","flow_id":2247896271051770,"pcap_cnt":775,"event_type":"dns","src_ip":"147.32.84.165","src_port":1141,"dest_ip":"147.32.80.9","dest_port":53,"proto":"UDP","dns":{"type":"query","id":553,"rrname":"irc.freenode.net","rrtype":"A","tx_id":0}}\n{"timestamp":"2011-08-12T16:59:22.181050+0200","flow_id":472067367468746,"pcap_cnt":25767,"event_type":"fileinfo","src_ip":"74.207.254.18","src_port":80,"dest_ip":"147.32.84.165","dest_port":1046,"proto":"TCP","http":{"hostname":"www.nmap.org","url":"/","http_user_agent":"Mozilla/4.0 (compatible)","http_content_type":"text/html","http_method":"GET","protocol":"HTTP/1.1","status":301,"redirect":"http://nmap.org/","length":301},"app_proto":"http","fileinfo":{"filename":"/","magic":"HTML document, ASCII text","gaps":false,"state":"CLOSED","md5":"70041821acf87389e40ddcb092004184","sha1":"10395ab3566395ca050232d2c1a0dbad69eb5fd2","sha256":"2e4c462b3424afcc04f43429d5f001e4ef9a28143bfeefb9af2254b4df3a7c1a","stored":true,"file_id":1,"size":301,"tx_id":0}}\n')),(0,r.kt)("p",null,"Import the log as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",d({parentName:"pre"},{className:"language-bash"}),"vast import suricata < eve.log\n")),(0,r.kt)("h3",d({},{id:"read-from-a-unix-domain-socket"}),"Read from a UNIX domain socket"),(0,r.kt)("p",null,"Instead of writing to a file, Suricata can also log to a UNIX domain socket that\nVAST can then read from. This saves a filesystem round-trip. This requires the\nfollowing settings in your ",(0,r.kt)("inlineCode",{parentName:"p"},"suricata.yaml"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",d({parentName:"pre"},{className:"language-yaml"}),"outputs:\n  - eve-log:\n    enabled: yes\n    filetype: unix_stream\n    filename: eve.sock\n")),(0,r.kt)("p",null,"Suricata creates ",(0,r.kt)("inlineCode",{parentName:"p"},"eve.sock")," upon startup. Thereafter, you can read from the\nsocket via netcat:"),(0,r.kt)("pre",null,(0,r.kt)("code",d({parentName:"pre"},{className:"language-bash"}),"nc -vlkU eve.sock | vast exec 'read suricata | ...'\n")),(0,r.kt)("p",null,"Or natively via this VAST pipeline:"),(0,r.kt)("pre",null,(0,r.kt)("code",d({parentName:"pre"},{}),"from file --uds eve.sock read suricata\n")))}N.isMDXComponent=!0}}]);