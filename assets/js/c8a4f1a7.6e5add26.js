"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[80419],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),f=a,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||i;return r?n.createElement(m,o(o({ref:t},c),{},{components:r})):n.createElement(m,o({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},19614:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>b,contentTitle:()=>v,default:()=>T,frontMatter:()=>m,metadata:()=>y,toc:()=>O});var n=r(3905),a=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,c=(e,t,r)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,u=(e,t)=>{for(var r in t||(t={}))s.call(t,r)&&c(e,r,t[r]);if(l)for(var r of l(t))p.call(t,r)&&c(e,r,t[r]);return e},d=(e,t)=>i(e,o(t)),f=(e,t)=>{var r={};for(var n in e)s.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&l)for(var n of l(e))t.indexOf(n)<0&&p.call(e,n)&&(r[n]=e[n]);return r};const m={description:"Typed textual data"},v="ASCII",y={unversionedId:"understand/formats/ascii",id:"version-VAST v3.0/understand/formats/ascii",title:"ASCII",description:"Typed textual data",source:"@site/versioned_docs/version-VAST v3.0/understand/formats/ascii.md",sourceDirName:"understand/formats",slug:"/understand/formats/ascii",permalink:"/VAST v3.0/understand/formats/ascii",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/versioned_docs/version-VAST v3.0/understand/formats/ascii.md",tags:[],version:"VAST v3.0",frontMatter:{description:"Typed textual data"},sidebar:"docsSidebar",previous:{title:"Arrow",permalink:"/VAST v3.0/understand/formats/arrow"},next:{title:"CEF",permalink:"/VAST v3.0/understand/formats/cef"}},b={},O=[{value:"Printer",id:"printer",level:2}],g={toc:O},h="wrapper";function T(e){var t=e,{components:r}=t,a=f(t,["components"]);return(0,n.kt)(h,d(u(u({},g),a),{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",u({},{id:"ascii"}),"ASCII"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"ascii")," format renders data according to VAST's ",(0,n.kt)("a",u({parentName:"p"},{href:"/VAST%20v3.0/understand/language/expressions#values"}),"value\nsyntax"),". A value is a data literal that makes easy to infer\nits type. The main value is that it represents a maximally condensend view of\nheterogeneous data. Think of it like NDJSON, but without field names."),(0,n.kt)("p",null,"For example, ",(0,n.kt)("inlineCode",{parentName:"p"},"1.2.3.4")," is an IP address literal, whereas ",(0,n.kt)("inlineCode",{parentName:"p"},'"1.2.3.4"'),"\nis a string literals. Type inference isn't always possible, e.g., in the case of\nempty lists (",(0,n.kt)("inlineCode",{parentName:"p"},"[]"),")."),(0,n.kt)("h2",u({},{id:"printer"}),"Printer"),(0,n.kt)("p",null,"Use ",(0,n.kt)("inlineCode",{parentName:"p"},"export ascii")," to render data in textual form:"),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-bash"}),"vast export ascii '#type == /.*/'\n")),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{}),'<2011-08-14T05:38:53.914038, 929669869939483, null, null, null, 147.32.84.165, 138, 147.32.84.255, 138, "UDP", "flow", null, 2, 0, 486, 0, 2011-08-12T12:53:47.928539, 2011-08-12T12:53:47.928552, 0, "new", "timeout", F, "failed">\n<2011-08-12T13:00:36.378914, 269421754201300, 22569, null, null, 147.32.84.165, 1027, 74.125.232.202, 80, "TCP", "http", null, "cr-tools.clients.google.com", "/service/check2?appid=%7B430FD4D0-B729-4F61-AA34-91526481799D%7D&appversion=1.3.21.65&applang=&machine=0&version=1.3.21.65&osversion=5.1&servicepack=Service%20Pack%202", null, "Google Update/1.3.21.65;winhttp", null, "GET", null, "HTTP/1.1", null, null, 0, 0>\n')))}T.isMDXComponent=!0}}]);