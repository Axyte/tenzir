"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7765],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,g=m["".concat(s,".").concat(c)]||m[c]||u[c]||i;return n?a.createElement(g,l(l({ref:t},d),{},{components:n})):a.createElement(g,l({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},98719:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={},l="Sigma",o={unversionedId:"understand/query-language/frontends/sigma",id:"understand/query-language/frontends/sigma",title:"Sigma",description:"The Sigma query frontend makes it possible to execute [Sigma",source:"@site/docs/understand/query-language/frontends/sigma.md",sourceDirName:"understand/query-language/frontends",slug:"/understand/query-language/frontends/sigma",permalink:"/docs/understand/query-language/frontends/sigma",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/master/web/docs/understand/query-language/frontends/sigma.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Frontends",permalink:"/docs/understand/query-language/frontends/"},next:{title:"VASTQL",permalink:"/docs/understand/query-language/frontends/vastql"}},s={},p=[{value:"Usage",id:"usage",level:2},{value:"Search Identifiers",id:"search-identifiers",level:3},{value:"Taxonomy",id:"taxonomy",level:3},{value:"Comparison",id:"comparison",level:2},{value:"Expressiveness",id:"expressiveness",level:2},{value:"Compatibility",id:"compatibility",level:2}],d={toc:p},m="wrapper";function u(e){let{components:t,...i}=e;return(0,r.kt)(m,(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sigma"},"Sigma"),(0,r.kt)("p",null,"The Sigma query frontend makes it possible to execute ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SigmaHQ/sigma"},"Sigma\nrules")," in VAST. This means you can\nprovide a Sigma rule instead of a VASTQL expression when querying data. For\nexample:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"vast export json < sigma-rule.yaml\n")),(0,r.kt)("p",null,"Sigma defines a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SigmaHQ/sigma/wiki/Specification"},"YAML-based rule language")," along with a compiler\nthat transforms rules into the native query languages of SIEM systems. VAST\ntakes a different approach and compiles the Sigma query directly into a native\nquery expression, without going through the Python tooling provided by the\nSigmaHQ project. This has numerous advantages in exploiting the richer type\nsystem of VAST. The translation process looks as follows:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Sigma Query Frontend",src:n(38522).Z+"#gh-light-mode-only",width:"999",height:"920"}),"\n",(0,r.kt)("img",{alt:"Sigma Query Frontend",src:n(49980).Z+"#gh-dark-mode-only",width:"999",height:"920"})),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"To use the Sigma frontend, ",(0,r.kt)("a",{parentName:"p",href:"/docs/setup/configure#plugins"},"install the ",(0,r.kt)("inlineCode",{parentName:"a"},"sigma"),"\nplugin"),". Then use the ",(0,r.kt)("inlineCode",{parentName:"p"},"vast export")," command\nto provide a Sigma rule on standard input:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"vast export <format> < sigma-rule.yaml\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"<format>")," placeholder represents an output format, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"csv"),",\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"sigma-rule.yaml")," a file containing a Sigma rule."),(0,r.kt)("h3",{id:"search-identifiers"},"Search Identifiers"),(0,r.kt)("p",null,"The Sigma rule YAML format requires a ",(0,r.kt)("inlineCode",{parentName:"p"},"detection")," attribute that includes a map\nof named sub-expression called ",(0,r.kt)("em",{parentName:"p"},"search identifiers"),". In addition, ",(0,r.kt)("inlineCode",{parentName:"p"},"detection"),"\nmust include a final ",(0,r.kt)("inlineCode",{parentName:"p"},"condition")," that combines search identifiers using boolean\nalgebra (AND, OR, and NOT) or syntactic sugar to reference groups of search\nexpressions, e.g., using the ",(0,r.kt)("inlineCode",{parentName:"p"},"1/all of *")," or plain wildcard syntax."),(0,r.kt)("p",null,"Consider the following Sigma ",(0,r.kt)("inlineCode",{parentName:"p"},"detection")," embedded in a rule:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'detection:\n  foo:\n    a: 42\n    b: "evil"\n  bar:\n    c: 1.2.3.4\n  condition: foo or not bar\n')),(0,r.kt)("p",null,"VAST translates this rule piece by building a symbol table of all keys (",(0,r.kt)("inlineCode",{parentName:"p"},"foo"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"bar"),"). Each sub-expression is a valid VAST expression itself:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"foo"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'a == 42 && b == "evil"')),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"bar"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"c == 1.2.3.4"))),(0,r.kt)("p",null,"Finally, VAST combines the expression according to the ",(0,r.kt)("inlineCode",{parentName:"p"},"condition"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'(a == 42 && b == "evil") || ! (c == 1.2.3.4)\n')),(0,r.kt)("admonition",{title:"Rich YAML Typing",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Because VAST has a beefed up YAML parser that performs type inference, the YAML\nsnippet ",(0,r.kt)("inlineCode",{parentName:"p"},"c: 1.2.3.4")," is parsed as a key-value pair with types ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"address"),". This means that we get the rich type system of VAST for free.")),(0,r.kt)("h3",{id:"taxonomy"},"Taxonomy"),(0,r.kt)("p",null,"Sigma comes with a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SigmaHQ/sigma/wiki/Taxonomy"},"taxonomy")," to\nfacilitate rule sharing by standardizing field names of the supported data\nsources."),(0,r.kt)("admonition",{title:"Missing Definitions",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"VAST currently does not ship with a taxonomy to transparently map the canonical\nSigma fields to an equivalent in VAST. We will ship the missing mappings in the\nfuture. To date, you must either use VAST concepts to re-implement the mappings\nor wait until we have provided them.")),(0,r.kt)("h2",{id:"comparison"},"Comparison"),(0,r.kt)("p",null,"VAST and Sigma have many commonalities. They both support flexible construction\nof search expressions using boolean algebra (AND, OR, NOT) and offer multiple\nways to define predicates and sub-expression. But there also exist differences\nin expressiveness and intent. This section compares the two systems."),(0,r.kt)("h2",{id:"expressiveness"},"Expressiveness"),(0,r.kt)("p",null,"The majority of rule definitions include combinations of exact string lookups,\nsubstring searches, or pattern matches. Sigma uses\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SigmaHQ/sigma/wiki/Specification#value-modifiers"},"modifiers"),"\nto select a concrete operator for given search predicate. Without a modifier\nspecification, Sigma uses equality comparison (",(0,r.kt)("inlineCode",{parentName:"p"},"=="),") of field and value. For\nexample, the ",(0,r.kt)("inlineCode",{parentName:"p"},"contains")," modifier changes the operator to substring search, and\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"re"),' modifier switches to a regular expression match. The now "legacy" sigma\ncompiler lacks support for ordering relationships, such as less-than comparison\nof numerical values, e.g., ',(0,r.kt)("inlineCode",{parentName:"p"},"x < 42")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"timestamp >= 2021-02"),". The\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SigmaHQ/pySigma"},"pySigma")," project addresses this with the\nadditional modifiers ",(0,r.kt)("inlineCode",{parentName:"p"},"lt"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"lte"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"gt"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"gte"),"."),(0,r.kt)("h2",{id:"compatibility"},"Compatibility"),(0,r.kt)("p",null,"VAST's support for Sigma is still in the early stages and does not support the\nfull ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SigmaHQ/sigma/wiki/Specification"},"language specification"),'. Most notable, the concept of a\n"value" is different:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"VAST does not yet offer case-insensitive string search"),(0,r.kt)("li",{parentName:"ul"},"VAST does not yet treat ",(0,r.kt)("inlineCode",{parentName:"li"},"*")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"?")," wildcards in strings as wildcards")),(0,r.kt)("p",null,"The table below shows the current implementation status of modifiers, where \u2705\nmeans implemented, \ud83d\udea7 not yet implemented but possible, and \u274c not yet supported\nby VAST's query engine:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Modifier"),(0,r.kt)("th",{parentName:"tr",align:null},"Use"),(0,r.kt)("th",{parentName:"tr",align:"center"},"sigmac"),(0,r.kt)("th",{parentName:"tr",align:"center"},"VAST"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"contains")),(0,r.kt)("td",{parentName:"tr",align:null},"perform a substring search with the value"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"startswith")),(0,r.kt)("td",{parentName:"tr",align:null},"match the value as a prefix"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"endswith")),(0,r.kt)("td",{parentName:"tr",align:null},"match the value as a suffix"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"base64")),(0,r.kt)("td",{parentName:"tr",align:null},"encode the value with Base64"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"base64offset")),(0,r.kt)("td",{parentName:"tr",align:null},"encode value as all three possible Base64 variants"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"utf16le"),"/",(0,r.kt)("inlineCode",{parentName:"td"},"wide")),(0,r.kt)("td",{parentName:"tr",align:null},"transform the value to UTF16 little endian"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\ud83d\udea7")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"utf16be")),(0,r.kt)("td",{parentName:"tr",align:null},"transform the value to UTF16 big endian"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\ud83d\udea7")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"utf16")),(0,r.kt)("td",{parentName:"tr",align:null},"transform the value to UTF16"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\ud83d\udea7")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"re")),(0,r.kt)("td",{parentName:"tr",align:null},"interpret the value as regular expression"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\ud83d\udea7")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"cidr")),(0,r.kt)("td",{parentName:"tr",align:null},"interpret the value as a IP CIDR"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"all")),(0,r.kt)("td",{parentName:"tr",align:null},"changes the expression logic from OR to AND"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"lt")),(0,r.kt)("td",{parentName:"tr",align:null},"compare less than (",(0,r.kt)("inlineCode",{parentName:"td"},"<"),") the value"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"lte")),(0,r.kt)("td",{parentName:"tr",align:null},"compare less than or equal to (",(0,r.kt)("inlineCode",{parentName:"td"},"<="),") the value"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"gt")),(0,r.kt)("td",{parentName:"tr",align:null},"compare greater than (",(0,r.kt)("inlineCode",{parentName:"td"},">"),") the value"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"gte")),(0,r.kt)("td",{parentName:"tr",align:null},"compare greater than or equal to (",(0,r.kt)("inlineCode",{parentName:"td"},">="),") the value"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"expand")),(0,r.kt)("td",{parentName:"tr",align:null},"expand value to placeholder strings, e.g., ",(0,r.kt)("inlineCode",{parentName:"td"},"%something%")),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u274c")))))}u.isMDXComponent=!0},49980:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/sigma-query-frontend-dark-acef89819a48db63cc2f2a69240d4c8f.png"},38522:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/sigma-query-frontend-light-fc9a55b6708af9fca88bef9f3a1fcdba.png"}}]);