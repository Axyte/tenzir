"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[21731],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(r),d=a,f=c["".concat(s,".").concat(d)]||c[d]||u[d]||o;return r?n.createElement(f,i(i({ref:t},m),{},{components:r})):n.createElement(f,i({ref:t},m))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},95523:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>b,contentTitle:()=>v,default:()=>w,frontMatter:()=>f,metadata:()=>h,toc:()=>g});var n=r(3905),a=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,m=(e,t,r)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,c=(e,t)=>{for(var r in t||(t={}))s.call(t,r)&&m(e,r,t[r]);if(l)for(var r of l(t))p.call(t,r)&&m(e,r,t[r]);return e},u=(e,t)=>o(e,i(t)),d=(e,t)=>{var r={};for(var n in e)s.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&l)for(var n of l(e))t.indexOf(n)<0&&p.call(e,n)&&(r[n]=e[n]);return r};const f={title:"VAST v3.1",authors:["tobim"],image:"/img/blog/vast-v3.1.excalidraw.svg",date:new Date("2023-05-12T00:00:00.000Z"),tags:["release","pipelines","operators"]},v=void 0,h={permalink:"/blog/vast-v3.1",source:"@site/blog/vast-v3.1/index.md",title:"VAST v3.1",description:"VAST v3.1 is out. This is",date:"2023-05-12T00:00:00.000Z",formattedDate:"May 12, 2023",tags:[{label:"release",permalink:"/blog/tags/release"},{label:"pipelines",permalink:"/blog/tags/pipelines"},{label:"operators",permalink:"/blog/tags/operators"}],readingTime:1.84,hasTruncateMarker:!0,authors:[{name:"Tobias Mayer",title:"Software Architect",url:"https://github.com/tobim",email:"tobias@tenzir.com",imageURL:"https://github.com/tobim.png",key:"tobim"}],frontMatter:{title:"VAST v3.1",authors:["tobim"],image:"/img/blog/vast-v3.1.excalidraw.svg",date:"2023-05-12T00:00:00.000Z",tags:["release","pipelines","operators"]},prevItem:{title:"Visibility Across Space and Time is now Tenzir",permalink:"/blog/vast-to-tenzir"},nextItem:{title:"VAST v3.0",permalink:"/blog/vast-v3.0"}},b={authorsImageUrls:[void 0]},g=[{value:"Pipelines Reloaded",id:"pipelines-reloaded",level:2},{value:"Operator Updates",id:"operator-updates",level:2},{value:"Operator Aliases",id:"operator-aliases",level:2},{value:"Notable Fixes",id:"notable-fixes",level:2},{value:"Improved IPv6 Subnet Handling",id:"improved-ipv6-subnet-handling",level:3},{value:"A More Resilient Systemd Service",id:"a-more-resilient-systemd-service",level:3}],k={toc:g},y="wrapper";function w(e){var t=e,{components:r}=t,a=d(t,["components"]);return(0,n.kt)(y,u(c(c({},k),a),{components:r,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",c({parentName:"p"},{href:"https://github.com/tenzir/vast/releases/tag/v3.1.0"}),"VAST v3.1")," is out. This is\na small checkpointing release that brings a few new changes and fixes."),(0,n.kt)("h2",c({},{id:"pipelines-reloaded"}),"Pipelines Reloaded"),(0,n.kt)("p",null,"The old pipeline execution engine is now gone and we updated VAST to use\nthe new engine everywhere. Most notably this applies to the ",(0,n.kt)("inlineCode",{parentName:"p"},"export")," command,\nthe compaction engine, and the ",(0,n.kt)("inlineCode",{parentName:"p"},"query")," REST interface."),(0,n.kt)("p",null,"For this release, we removed support for configuration level export and import\npipelines. This feature will make a return in the next major release."),(0,n.kt)("p",null,"We also removed the deprecated YAML-based pipeline syntax to fully concentrate\non the VAST Language."),(0,n.kt)("h2",c({},{id:"operator-updates"}),"Operator Updates"),(0,n.kt)("p",null,"We introduced several new operators:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",c({parentName:"li"},{href:"/operators/transformations/tail"}),(0,n.kt)("inlineCode",{parentName:"a"},"tail")),": limits the\ninput to the last N events."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",c({parentName:"li"},{href:"/operators/transformations/unique"}),(0,n.kt)("inlineCode",{parentName:"a"},"unique")),": removes\nadjacent duplicates"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",c({parentName:"li"},{href:"/operators/transformations/measure"}),(0,n.kt)("inlineCode",{parentName:"a"},"measure")),": replaces\nthe input with incremental metrics describing the input."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"version"),": returns a single event displaying version information of VAST. (Now\n",(0,n.kt)("a",c({parentName:"li"},{href:"/operators/sources/show"}),(0,n.kt)("inlineCode",{parentName:"a"},"show")),".)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",c({parentName:"li"},{href:"/operators/sources/from"}),(0,n.kt)("inlineCode",{parentName:"a"},"from")),": produces events by\ncombining a connector and a format."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",c({parentName:"li"},{href:"/operators/transformations/read"}),(0,n.kt)("inlineCode",{parentName:"a"},"read")),": a short form of\n",(0,n.kt)("inlineCode",{parentName:"li"},"from")," that allows for omitting the connector."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",c({parentName:"li"},{href:"/operators/sinks/to"}),(0,n.kt)("inlineCode",{parentName:"a"},"to")),": consumes events by combining\na connector and format."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",c({parentName:"li"},{href:"/operators/transformations/write"}),(0,n.kt)("inlineCode",{parentName:"a"},"write")),": a short form of ",(0,n.kt)("inlineCode",{parentName:"li"},"to"),"\nthat allows for omitting the connector.")),(0,n.kt)("p",null,"Additionally, the ",(0,n.kt)("inlineCode",{parentName:"p"},"put"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"replace"),", and ",(0,n.kt)("inlineCode",{parentName:"p"},"extend")," operators have been updated to\nwork with selectors and extractors. Check out the ",(0,n.kt)("a",c({parentName:"p"},{href:"/operators/"}),"growing list of\noperators"),"."),(0,n.kt)("h2",c({},{id:"operator-aliases"}),"Operator Aliases"),(0,n.kt)("p",null,"You can now define aliases for operators in the configuration file. Use it to\nassign a short and reusable name for operators that would otherwise require\nseveral arguments. For example:"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-yaml"}),"vast:\n  operators:\n    aggregate_flows: |\n       summarize\n         pkts_toserver=sum(flow.pkts_toserver),\n         pkts_toclient=sum(flow.pkts_toclient),\n         bytes_toserver=sum(flow.bytes_toserver),\n         bytes_toclient=sum(flow.bytes_toclient),\n         start=min(flow.start),\n         end=max(flow.end)\n       by\n         timestamp,\n         src_ip,\n         dest_ip\n       resolution\n         10 mins\n")),(0,n.kt)("p",null,"Now use it like a regular operator in a pipeline:"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{}),"from file read suricata | aggregate_flows\n")),(0,n.kt)("h2",c({},{id:"notable-fixes"}),"Notable Fixes"),(0,n.kt)("h3",c({},{id:"improved-ipv6-subnet-handling"}),"Improved IPv6 Subnet Handling"),(0,n.kt)("p",null,"The handling of subnets in the IPv6 space received multiple fixes:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The expression ",(0,n.kt)("inlineCode",{parentName:"li"},":ip !in ::ffff:0:0/96")," now finds all events that\ncontain IPs that cannot be represented as IPv4 addresses."),(0,n.kt)("li",{parentName:"ul"},"Subnets with a prefix above 32 are now correctly formatted with\nan IPv6 network part, even if the address is representable as IPv4.")),(0,n.kt)("h3",c({},{id:"a-more-resilient-systemd-service"}),"A More Resilient Systemd Service"),(0,n.kt)("p",null,"The systemd unit for VAST now automatically restarts the node in case the\nprocess went down."))}w.isMDXComponent=!0}}]);