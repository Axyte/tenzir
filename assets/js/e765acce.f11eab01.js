"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9928],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=s(n),g=a,d=c["".concat(l,".").concat(g)]||c[g]||u[g]||i;return n?r.createElement(d,o(o({ref:t},m),{},{components:n})):r.createElement(d,o({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:a,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},26569:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={title:"Richer Typing in Sigma",description:"Towards Native Sigma Rule Execution",authors:"mavam",date:new Date("2022-08-12T00:00:00.000Z"),last_updated:new Date("2023-02-08T00:00:00.000Z"),tags:["sigma","regex","query-frontend"]},o=void 0,p={permalink:"/blog/richer-typing-in-sigma",source:"@site/blog/richer-typing-in-sigma/index.md",title:"Richer Typing in Sigma",description:"Towards Native Sigma Rule Execution",date:"2022-08-12T00:00:00.000Z",formattedDate:"August 12, 2022",tags:[{label:"sigma",permalink:"/blog/tags/sigma"},{label:"regex",permalink:"/blog/tags/regex"},{label:"query-frontend",permalink:"/blog/tags/query-frontend"}],readingTime:4.72,hasTruncateMarker:!0,authors:[{name:"Matthias Vallentin",title:"Co-Founder & CEO",url:"https://github.com/mavam",email:"matthias@tenzir.com",imageURL:"https://github.com/mavam.png",key:"mavam"}],frontMatter:{title:"Richer Typing in Sigma",description:"Towards Native Sigma Rule Execution",authors:"mavam",date:"2022-08-12T00:00:00.000Z",last_updated:"2023-02-08T00:00:00.000Z",tags:["sigma","regex","query-frontend"]},prevItem:{title:"VAST v2.3",permalink:"/blog/vast-v2.3"},nextItem:{title:"VAST v2.2",permalink:"/blog/vast-v2.2"}},l={authorsImageUrls:[void 0]},s=[],m={toc:s},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"VAST's ",(0,a.kt)("a",{parentName:"p",href:"/docs/understand/query-language/frontends/sigma"},"Sigma frontend"),"\nnow supports more modifiers. In the Sigma language, modifiers transform\npredicates in various ways, e.g., to apply a function over a value or to change\nthe operator of a predicate. Modifiers are the customization point to enhance\nexpressiveness of query operations."),(0,a.kt)("p",null,"The new ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/SigmaHQ/pySigma"},"pySigma")," effort, which will eventually replace the\nnow-considered-legacy ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/SigmaHQ/sigma"},"sigma")," project, comes with new modifiers as well.\nMost notably, ",(0,a.kt)("inlineCode",{parentName:"p"},"lt"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"lte"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"gt"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"gte")," provide comparisons over value domains\nwith a total ordering, e.g., numbers: ",(0,a.kt)("inlineCode",{parentName:"p"},"x >= 42"),". In addition, the ",(0,a.kt)("inlineCode",{parentName:"p"},"cidr"),"\nmodifier interprets a value as subnet, e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"10.0.0.0/8"),". Richer typing!"))}u.isMDXComponent=!0}}]);