"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3264],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},25599:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>b,contentTitle:()=>h,default:()=>O,frontMatter:()=>f,metadata:()=>y,toc:()=>g});var r=n(3905),a=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,p=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))l.call(t,n)&&p(e,n,t[n]);if(s)for(var n of s(t))c.call(t,n)&&p(e,n,t[n]);return e},d=(e,t)=>o(e,i(t)),m=(e,t)=>{var n={};for(var r in e)l.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&s)for(var r of s(e))t.indexOf(r)<0&&c.call(e,r)&&(n[r]=e[r]);return n};const f={sidebar_position:5},h="Show available schemas",y={unversionedId:"user-guides/show-available-schemas",id:"user-guides/show-available-schemas",title:"Show available schemas",description:"This feature is currently only available on the command line using the",source:"@site/docs/user-guides/show-available-schemas.md",sourceDirName:"user-guides",slug:"/user-guides/show-available-schemas",permalink:"/next/user-guides/show-available-schemas",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/docs/user-guides/show-available-schemas.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"Export from a node",permalink:"/next/user-guides/export-from-a-node"},next:{title:"Transform data at rest",permalink:"/next/user-guides/transform-data-at-rest"}},b={},g=[],v={toc:g},w="wrapper";function O(e){var t=e,{components:n}=t,a=m(t,["components"]);return(0,r.kt)(w,d(u(u({},v),a),{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",u({},{id:"show-available-schemas"}),"Show available schemas"),(0,r.kt)("admonition",u({},{title:"Currently CLI only",type:"caution"}),(0,r.kt)("p",{parentName:"admonition"},"This feature is currently only available on the command line using the\n",(0,r.kt)("inlineCode",{parentName:"p"},"tenzir-ctl")," binary. We're working on bringing it back as an operator so that\nyou can write ",(0,r.kt)("inlineCode",{parentName:"p"},"show schemas")," from anywhere.")),(0,r.kt)("p",null,"When you write a pipeline, you inevitably reference field names from records. If\nyou do not know the shape of your data or if the data is highly dynamic, you can\nintrospect the available ",(0,r.kt)("a",u({parentName:"p"},{href:"/next/data-model/schemas"}),"schemas"),"."),(0,r.kt)("p",null,"The equivalent of ",(0,r.kt)("inlineCode",{parentName:"p"},"SHOW TABLES")," in SQL databases is ",(0,r.kt)("inlineCode",{parentName:"p"},"show schemas"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-bash"}),"tenzir-ctl 'show schemas --yaml'\n")),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-yaml"}),"# Excerpt only\n- zeek.conn:\n    record:\n      - ts:\n          timestamp: time\n      - uid:\n          type: string\n          attributes:\n            index: hash\n      - id:\n          zeek.conn_id:\n            record:\n              - orig_h: ip\n              - orig_p:\n                  port: uint64\n              - resp_h: ip\n              - resp_p:\n                  port: uint64\n      - proto: string\n      - service: string\n      - duration: duration\n      - orig_bytes: uint64\n      - resp_bytes: uint64\n      - conn_state: string\n      - ...\n")),(0,r.kt)("p",null,"This example shows the schema for a Zeek conn.log. You can see the various\nfields as list of key-value pairs under the ",(0,r.kt)("inlineCode",{parentName:"p"},"record")," key. The nested record ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),"\nthat is a type alias with the type name ",(0,r.kt)("inlineCode",{parentName:"p"},"zeek.conn_id"),"."))}O.isMDXComponent=!0}}]);