namespace vast.fbs.type.detail;

/// The field of an enumeration type.
table EnumerationField {
  key: uint (key);
  name: string (required);
}

/// A typed field with a name.
table RecordField {
  name: string (required);
  type: [ubyte] (required, nested_flatbuffer: "vast.fbs.Type");
}

/// A key-value pair type annotation.
table Attribute {
  key: string (key);
  value: string;
}

/// A type with a name, attributes, or both.
table EnrichedType {
  type: [ubyte] (required, nested_flatbuffer: "vast.fbs.Type");
  name: string;
  attributes: [Attribute];
}

namespace vast.fbs.type;

/// A boolean value that can either be true or false.
table BoolType {}

/// A signed integer.
table Int64Type {}

/// An unsigned integer.
table UInt64Type {}

/// A floating-point value.
table RealType {}

/// A time interval.
table DurationType {}

/// A point in time.
table TimeType {}

/// A string of characters.
table StringType {}

/// A regular expression.
table PatternType {}

/// An IP address (v4 or v6).
table AddressType {}

/// A CIDR subnet.
table SubnetType {}

/// An enumeration type that can have one specific value.
table EnumerationType {
  fields: [detail.EnumerationField] (required);
}

/// An ordered sequence of values.
table ListType {
  type: [ubyte] (required, nested_flatbuffer: "vast.fbs.Type");
}

/// An associative mapping from keys to values.
table MapType {
  key_type: [ubyte] (required, nested_flatbuffer: "vast.fbs.Type");
  value_type: [ubyte] (required, nested_flatbuffer: "vast.fbs.Type");
}

/// A list of fields, each of which have a name and type.
table RecordType {
  fields: [detail.RecordField] (required);
}

namespace vast.fbs.type;

/// The sum type of all possible types.
union Type {
  bool_type: BoolType,
  int64_type: Int64Type,
  uint64_type: UInt64Type,
  real_type: RealType,
  duration_type: DurationType,
  time_type: TimeType,
  string_type: StringType,
  pattern_type: PatternType,
  address_type: AddressType,
  subnet_type: SubnetType,
  enumeration_type: EnumerationType,
  list_type: ListType,
  map_type: MapType,
  record_type: RecordType,
  enriched_type: detail.EnrichedType,
}

namespace vast.fbs;

/// The semantic representation of data.
table Type {
  type: type.Type;
}

/// A slicable type.
/// NOTE: This is for use in FlatBuffers schemas other than this one; it's
/// intentionally unused in this file to save up to 24 bytes of offset tables
/// per nested type.
table TypeBuffer {
  buffer: [ubyte] (required, nested_flatbuffer: "vast.fbs.Type");
}

root_type Type;
