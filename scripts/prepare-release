#! /usr/bin/env zsh

set -euo pipefail

# Check if exactly one argument was passed: the new version.
if (( $# != 1 )) || [[ "$1" == "--help" ]]; then
  >&2 {
    echo "Usage: $0 <version>"
    echo "  version: The new version, e.g., v1.0.0 or v1.0.0-rc1"
  }
  exit 1
fi

# Check if all required tools are available.
for binary in 'cmake' 'gh' 'rsync' 'git' 'perl' 'jq'; do
  if ! command -v "${binary}" 2>&1 >/dev/null; then
    >&2 echo "Error: ${binary} not in PATH"
    exit 1
  fi
done

# To simplify this script, we require a clean working directoy.
if ! [ -z "$(git status --porcelain)" ]; then
  >&2 echo "Error: working directory unclean"
  exit 1
fi

# Determine the source directory.
source_dir="$(git -C "$(dirname "$0:A")" rev-parse --show-toplevel)"

# Determine the last version including release candidates, the last version
# excluding release candidates and the new version.
last_rc_version="$(git -C "${source_dir}" describe --abbrev=0 --match='v[0-9]*')"
last_version="$(git -C "${source_dir}" describe --abbrev=0 --match='v[0-9]*' --exclude='*-rc*')"
new_version="$1"
new_version_major_minor="${new_version%.*}"

# Determine the build directory.
build_dir=$(mktemp -d 2>/dev/null || mktemp -d -t "build-${new_version}")

# Check that the new version does not exist already.
if [ -d "${source_dir}/changelog/${new_version}" ]; then
  >&2 echo "Error: changelog/${new_version} already exists"
  exit 1
fi

# Create a new branch that bases off of current origin/main.
git fetch origin main
git switch -C "topic/release-${new_version}" origin/main
# Update the fallback version and its ancestor count.
# We expect to make one change commit and one merge commit, which is then tagged
# -> the tag's rev-count is that of HEAD + 2.
rev_count="$(($(git rev-list --count HEAD) + 2))"
version_json="$(jq --arg v "${new_version#v}" --arg cnt "${rev_count}" \
  '."vast-version-fallback" = $v | ."vast-version-rev-count" = ($cnt|tonumber)' version.json)"
echo -E "${version_json}" > version.json

# If the new version is not a release candidate, change mentions of the version
# in README.md as well, and create a new docs version.
if [[ "${new_version}" != *"-rc"* ]]; then
  perl -i -pe "s/${last_version}/${new_version}/g" "${source_dir}/README.md"
  pushd "${source_dir}/web"
  # In the documentation on vast.io we tag using the major and minor version
  # only, ignoring the patch version. This means that for a patch version we
  # must override the existing release, which per the Docusaurus docs[^1] is
  # possible by deleting the existing version and then cutting it again. Since
  # deleting a non-existing version is a no-op we just always do that.
  # ^1: https://docusaurus.io/docs/versioning#deleting-an-existing-version
  #
  # This bit removes the already tagged version:
  jq "map(select(. != \"${new_version_major_minor}\"))" < versions.json > versions.json.tmp
  mv -f versions.json.tmp versions.json
  rm -rf "versioned_docs/version-${new_version_major_minor}"
  rm -rf "versioned_sidebars/version-${new_version_major_minor}-sidebars.json"
  # And this actually cuts a new docs version:
  yarn install --frozen-lockfile
  yarn docusaurus docs:version "${new_version_major_minor}"
  popd
fi

# Copy the next changelog directory.
if [ -d "${source_dir}/changelog/next" ]; then
  for entry in "${source_dir}/changelog/next/"**/*.md; do
    if [[ "$entry" != "${entry/--*.md/.md}" ]]; then
      mv "$entry" "${entry/--*.md/.md}"
    fi
  done
  rsync -avzh "${source_dir}/changelog/next/" \
    "${source_dir}/changelog/${new_version}"
  rm -r "${source_dir}/changelog/next"
fi

# If the previous release was an rc as well, merge the changelog directories.
if [[ "${last_rc_version}" == *"-rc"* ]]; then
  if [ -d "${source_dir}/changelog/${last_rc_version}" ]; then
    rsync -avzh "${source_dir}/changelog/${last_rc_version}/" \
      "${source_dir}/changelog/${new_version}"
    rm -r "${source_dir}/changelog/${last_rc_version}"
  fi
fi

# Update version of Python bindings.
pushd "${source_dir}/python"
poetry version "${new_version#v}"
popd

# Commit and open a PR against tenzir/vast.
pushd "${source_dir}"
git add --all
git commit -m "Prepare repository for VAST ${new_version}"
gh pr create --web
popd

# Switch back to the branch we started on.
git switch -
