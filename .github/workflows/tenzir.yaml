name: Tenzir
on:
  workflow_dispatch:
    inputs:
      upload-static-binary-to-github:
        description: "Build the static binary packages and attach to the Workflow Run"
        type: boolean
        required: false
        default: false
  push:
    branches:
      - main
      - v*
  pull_request:
    types:
      - opened
      - synchronize
  merge_group:
    types:
      - checks_requested
  release:
    types:
      - published

# This section defines how the Tenzir action is enqueued.
concurrency:
  # Wait for in-progress runs of this action for the same branch to finish
  # before starting, ensuring that a branch is only built once at a time. This
  # has a double-purpose: It ensures that caches are always able to pick up work
  # from previous builds of the same branch, and it rate-limits the CI to ensure
  # it's running smoothly for all users.
  group: ${{ github.workflow }}-${{ github.ref }}
  # Cancel all in-progress runs of this action for the same pull request.
  cancel-in-progress: ${{ github.event_name == 'pull_request' || github.event_name == 'merge_group' }}

env:
  CCACHE_MAXSIZE: "5G"
  GCP_WORKLOAD_IDP: projects/1057156539039/locations/global/workloadIdentityPools/gh-actions-pool/providers/gh-actions-provider
  GCP_SERVICE_ACCOUNT: github-actions@crucial-kayak-261816.iam.gserviceaccount.com

# TODO: cherry-pick permissions
permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  discussions: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  tenzir:
    name: Tenzir (${{ matrix.tenzir.name }})
    runs-on: ${{ matrix.tenzir.os }}
    container: ${{ matrix.tenzir.container }}
    strategy:
      fail-fast: false
      matrix:
        tenzir:
          - os: ubuntu-20.04
            container: debian:bookworm-slim
            name: Debian
            compiler: GCC
            cc: gcc-12
            cxx: g++-12
            dependencies-script-path: scripts/debian/install-dev-dependencies.sh
            cmake-extra-flags: -DTENZIR_ENABLE_BUNDLED_CAF:BOOL=ON
            bundled-plugins:
              # We enable the web and fluent-bit plugins here, because:
              #  * web: Is needed as a dependency of the pipeline-manager, and
              #    plugin dependency graphs cannot the modeled with the current
              #    plugin API.
              #  * fluent-bit: The plugin library links to libfluent-bit.so, which
              #    is built by upstream without support for `dlopen()`, the
              #    integrated build method used here works around that by linking
              #    libfluent-bit.so to libtenzir.so directly. The alternative
              #    workaround of using LD_PRELOAD for the standalone plugin build
              #    does not work in the GitHub Actions Runner.
              - plugins/web
              - plugins/fluent-bit
          - os: macos-latest
            container: null
            name: macOS
            compiler: Clang
            cc: clang
            cxx: clang++
            dependencies-script-path: scripts/macOS/install-dev-dependencies.sh
            cmake-extra-flags: -DTENZIR_ENABLE_BUNDLED_CAF:BOOL=ON
            bundled-plugins:
              # Parquet uses illegal instructions on macOS in Arrow version
              # 14.0.1, so we disable it in the macOS CI. Last checked on
              # 2023-12-16.
              - plugins/[^(parquet)]*
              - contrib/tenzir-plugins/*
    env:
      BUILD_DIR: build
      CC: ${{ matrix.tenzir.cc }}
      CXX: ${{ matrix.tenzir.cxx }}
      CCACHE_ABSSTDERR: true
      CCACHE_COMPRESS: true
      CCACHE_COMPRESSLEVEL: 6
      CCACHE_DIR: "${{ github.workspace }}/.ccache"
      CCACHE_HASH_DIR: true
      CCACHE_SLOPPINESS: "file_macro,time_macros"
      CCACHE_UNIFY: true
      CMAKE_CXX_COMPILER_LAUNCHER: ccache
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CMAKE_GENERATOR: Ninja
      CMAKE_MAKE_PROGRAM: ninja
      DEBIAN_FRONTEND: noninteractive
      HOMEBREW_GITHUB_API_TOKEN: ${{ github.token }}
      HOMEBREW_NO_ANALYTICS: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
      - name: Fetch ccache Cache
        uses: pat-s/always-upload-cache@v3.0.11
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ github.workflow }}-${{ matrix.tenzir.name }}-${{ matrix.tenzir.compiler }}-${{ needs.configure.outputs.head-ref-slug }}-${{ github.sha }}
          restore-keys: Tenzir-Debian-GCC-topic-diagnostic-for-unknown-msgpack-type-31524e5d72cbbbd0df25b4f12857c807a05907e0
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDP }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
      - name: Upload ccache contents
        run: |
          tar czf ccache.tar.gz ${{ env.CCACHE_DIR }}
          gsutil -m cp "ccache.tar.gz" "gs://${{ vars.GCS_BUCKET }}/debug/ccache-ci.tar.gz"
