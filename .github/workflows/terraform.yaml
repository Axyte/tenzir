name: "Terraform"
on: workflow_dispatch

# This CI configuration has multiple dependencies:
# - You need an AWS account with a user having sufficient IAM access to run the
#   Terraform scripts and other CLI commands.
# - AWS credentials should be set in the Github repository secrets as
#   AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. They should have sufficient IAM
#   priviledges to run Fargate tasks and Lambda functions.
# - You need to choose an AWS region and a VPC within that region. These should
#   be configured in the repository secrets as AWS_REGION and PEERED_VPC_ID.
# - The Tenzir deployment creates a new VPC. Its ip range should not overlap an
#   existing one in your account. Configure its CIDR in the repository secrets
#   as TENZIR_CIDR (for example 172.30.0.0/16).
# - The CI run uses Terraform Cloud to store the state. In Github Action
#   secrets, set TF_ORGANIZATION with your Terraform Cloud organizations name
#   and TF_API_TOKEN with a Terraform Cloud API key (for instance a user token).

# Notes:
# - This workflow interacts with AWS resources and cannot be executed multiple
#   times at in parallel. The workflow level `concurrency` should prevent that
#   from happening, and the Terraform state will be protected against
#   inconsistencies by the lock provided by Terraform Cloud. Still, if the AWS
#   resources are tempered with exernally, tests might fail in unexpected ways.
# - If Terraform fails or is interrupted during deployment or destruction, the
#   state might end up locked and subsequent runs will fail. In this case the
#   state first needs to be unlocked, for instance from the Terraform Cloud UI.
# - You can optionally set a different prefix for the Terraform Cloud workspace
#   names using the TF_WORKSPACE_PREFIX secret (default is "gh-act-")

# Set these secrets to configure the CI run
env:
  TENZIR_PEERED_VPC_ID: "${{ secrets.TENZIR_PEERED_VPC_ID }}"
  TENZIR_CIDR: "${{ secrets.TENZIR_CIDR }}"
  TENZIR_AWS_REGION: "${{ secrets.TENZIR_AWS_REGION }}"
  TF_ORGANIZATION: "${{ secrets.TF_ORGANIZATION }}"
  TF_WORKSPACE_PREFIX: "${{ secrets.TF_WORKSPACE_PREFIX  || 'gh-act-' }}"
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
  AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
  TenzirCLOUD_NO_PTY: 1
  TenzirCLOUD_TRACE: 1

concurrency: tenzir_aws_integration_tests

jobs:
  determine-version:
    name: Determine Version
    runs-on: ubuntu-20.04
    outputs:
      release-version: ${{ steps.determine-version.outputs.release-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch Tags
        run: git fetch origin +refs/tags/*:refs/tags/*
      - name: Determine Version
        id: determine-version
        run: |
          release_version="$(git describe --abbrev=0 --match='v[0-9]*')"
          echo "release-version=${release_version}" >> $GITHUB_OUTPUT

  tenzircloud-cli:
    name: Build and cache CLI
    runs-on: ubuntu-20.04
    outputs:
      cached-img: ${{ steps.push-cli-img.outputs.cached-img }}
    defaults:
      run:
        working-directory: ./cloud/aws
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build CLI image
        run: ./tenzir-cloud
      - name: Push CLI image to cache
        id: push-cli-img
        run: |
          CLI_IMAGE="ghcr.io/tenzir/tenzir-cloud-cli:$(git rev-parse --short HEAD)"
          docker tag tenzir/tenzir-cloud-cli:latest "$CLI_IMAGE"
          docker push "$CLI_IMAGE"
          echo "cached-img=${CLI_IMAGE}" >> $GITHUB_OUTPUT


  tenzircloud-local-init:
    needs:
      - tenzircloud-cli
    name: Tenzir Terraform init with local backend
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./cloud/aws
    env:
      TF_STATE_BACKEND: "local"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Pull cached CLI image
        run: |
          docker pull "${{ needs.tenzircloud-cli.outputs.cached-img }}"
          docker tag "${{ needs.tenzircloud-cli.outputs.cached-img }}" tenzir/tenzir-cloud-cli:latest
      - name: Init on empty state
        run: ./tenzir-cloud init
      - name: Init clean
        run: ./tenzir-cloud init --clean

  cloudtenzir-deploy:
    needs:
      - determine-version
      - tenzircloud-cli
    name: Deploy Tenzir on AWS
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./cloud/aws
    env:
      TF_STATE_BACKEND: "cloud"
      TENZIR_CLOUD_PLUGINS: "workbucket,tfcloud,misp"
      # Run on the latest release to avoid glitches from unstable versions
      TENZIR_VERSION: ${{ needs.determine-version.outputs.release-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Secret hashes
        run: |
          echo -n $TENZIR_VERSION
          echo -n $TENZIR_PEERED_VPC_ID | md5sum
          echo -n $TENZIR_CIDR | md5sum
          echo -n $TENZIR_AWS_REGION | md5sum
          echo -n $TF_ORGANIZATION | md5sum
          echo -n $TF_WORKSPACE_PREFIX | md5sum
          echo -n $TF_API_TOKEN | md5sum
          echo -n $AWS_ACCESS_KEY_ID | md5sum
          echo -n $AWS_SECRET_ACCESS_KEY | md5sum
      - name: Pull cached CLI image
        run: |
          docker pull "${{ needs.tenzircloud-cli.outputs.cached-img }}"
          docker tag "${{ needs.tenzircloud-cli.outputs.cached-img }}" tenzir/tenzir-cloud-cli:latest
      - name: Configure Terraform Cloud
        run: ./tenzir-cloud tfcloud.config --auto
      - name: Deploy
        run: ./tenzir-cloud deploy --auto-approve

  cloudtenzir-playbook:
    needs:
      - tenzircloud-cli
      - cloudtenzir-deploy
    name: Run Tenzir test playbook on AWS
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./cloud/aws
    env:
      TF_STATE_BACKEND: "cloud"
      TENZIR_CLOUD_PLUGINS: "workbucket,tests,misp"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Pull cached CLI image
        run: |
          docker pull "${{ needs.tenzircloud-cli.outputs.cached-img }}"
          docker tag "${{ needs.tenzircloud-cli.outputs.cached-img }}" tenzir/tenzir-cloud-cli:latest
      - name: Init
        run: ./tenzir-cloud init
      - name: Run test playbook
        run: ./tenzir-cloud tests.run
      - name: Init clean
        run: ./tenzir-cloud init --clean
      - name: Deploy step (noop)
        run: ./tenzir-cloud deploy --step=workbucket --auto-approve
      - name: Run test playbook after init
        run: ./tenzir-cloud tests.run


  cloudtenzir-flowlogs:
    needs:
      - tenzircloud-cli
      - cloudtenzir-deploy
    name: Deploy Flowlogs datasource
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./cloud/aws
    env:
      TF_STATE_BACKEND: "cloud"
      TENZIR_CLOUD_PLUGINS: "tfcloud,workbucket,flowlogs"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Pull cached CLI image
        run: |
          docker pull "${{ needs.tenzircloud-cli.outputs.cached-img }}"
          docker tag "${{ needs.tenzircloud-cli.outputs.cached-img }}" tenzir/tenzir-cloud-cli:latest
      - name: Preset source bucket env
        run: |
          echo "TENZIR_FLOWLOGS_BUCKET_NAME=dummybucket" >> $GITHUB_ENV
          echo "TENZIR_FLOWLOGS_BUCKET_REGION=$TENZIR_AWS_REGION" >> $GITHUB_ENV
      - name: Init
        run: ./tenzir-cloud init
      - name: Replace actual source bucket name env
        run: |
          ACTUAL_BUCKET=$(./tenzir-cloud workbucket.name)
          echo "TENZIR_FLOWLOGS_BUCKET_NAME=$ACTUAL_BUCKET" >> $GITHUB_ENV
      - name: Configure Terraform Cloud
        run: ./tenzir-cloud tfcloud.config --auto
      - name: Deploy flowlogs
        run: ./tenzir-cloud deploy -a -s flowlogs
      - name: Destroy flowlogs
        if: always()
        run: ./tenzir-cloud destroy -a -s flowlogs

  cloudtenzir-cloudtrail:
    needs:
      - tenzircloud-cli
      - cloudtenzir-deploy
    name: Deploy Cloudtrail datasource
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./cloud/aws
    env:
      TF_STATE_BACKEND: "cloud"
      TENZIR_CLOUD_PLUGINS: "tfcloud,workbucket,cloudtrail"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Pull cached CLI image
        run: |
          docker pull "${{ needs.tenzircloud-cli.outputs.cached-img }}"
          docker tag "${{ needs.tenzircloud-cli.outputs.cached-img }}" tenzir/tenzir-cloud-cli:latest
      - name: Preset source bucket env
        run: |
          echo "TENZIR_CLOUDTRAIL_BUCKET_NAME=dummybucket" >> $GITHUB_ENV
          echo "TENZIR_CLOUDTRAIL_BUCKET_REGION=$TENZIR_AWS_REGION" >> $GITHUB_ENV
      - name: Init
        run: ./tenzir-cloud init
      - name: Replace actual source bucket name env
        run: |
          ACTUAL_BUCKET=$(./tenzir-cloud workbucket.name)
          echo "TENZIR_CLOUDTRAIL_BUCKET_NAME=$ACTUAL_BUCKET" >> $GITHUB_ENV
      - name: Configure Terraform Cloud
        run: ./tenzir-cloud tfcloud.config --auto
      - name: Deploy cloudtrail
        run: ./tenzir-cloud deploy -a -s cloudtrail
      - name: Destroy cloudtrail
        if: always()
        run: ./tenzir-cloud destroy -a -s cloudtrail

  cloudtenzir-destroy:
    needs:
      - tenzircloud-cli
      - cloudtenzir-playbook
      - cloudtenzir-flowlogs
      - cloudtenzir-cloudtrail
    if: ${{ always() }}
    name: Destroy Tenzir stack from AWS
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./cloud/aws
    env:
      TF_STATE_BACKEND: "cloud"
      TENZIR_CLOUD_PLUGINS: "workbucket,misp"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Pull cached CLI image
        run: |
          docker pull "${{ needs.tenzircloud-cli.outputs.cached-img }}"
          docker tag "${{ needs.tenzircloud-cli.outputs.cached-img }}" tenzir/tenzir-cloud-cli:latest
      - name: Destroy
        continue-on-error: true
        id: destroy
        run: ./tenzir-cloud destroy --auto-approve
      - name: Retry destroy
        if: steps.destroy.outcome=='failure'
        run: |
          echo "Destroy sometimes fails for an unexplained reason."
          echo "Retrying after a few minutes usually works."
          sleep 300
          ./tenzir-cloud destroy --auto-approve
