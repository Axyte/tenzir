name: Nix Manual
on:
  workflow_dispatch:
    inputs:
      build-de:
        type: boolean
        default: false
        required: false
      build-ce:
        type: boolean
        default: false
        required: false
      build-ee:
        type: boolean
        default: false
        required: false
      tag:
        type: string
        required: false
      tag-sha:
        type: boolean
        required: false
        default: false

jobs:
  configure:
    name: Configure Inputs
    runs-on: ubuntu-20.04
    outputs:
      nix-matrix: ${{ steps.nix.outputs.nix-matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Fetch Tags
        run: git fetch origin +refs/tags/*:refs/tags/*
      - name: Calculate Version
        id: version
        run: |
          version="$(git describe --abbrev=10 --long --dirty --match='v[0-9]*')"
          echo "version=${version}" >> "$GITHUB_OUTPUT"
      - name: Assemble the Job Matrix
        id: nix
        run: |
          echo '::notice inputs = ${{ toJSON(inputs) }}'
          tags=()
          if [[ '${{ inputs.tag }}' != "" ]]; then
            tags+=('${{ inputs.tag }}')
          fi
          if [[ '${{ inputs.tag-sha }}' == 'true' ]]; then
            tags+=('${{ github.sha }}')
          fi
          if [[ '${{ inputs.build }}' == 'true' ]]; then
            tags+=('${{ github.sha }}')
          fi
          nix_config="$(jq -nc \
            '."editions" = [
              if ${{ inputs.build-de }} then
                {
                  "name": "tenzir",
                  "static": true,
                  "upload-package-to-github": true,
                  "package-stores": [
                    "gcs:tenzir-public-data/static-binary-builds"
                  ],
                  "image-registries": [
                    "ghcr.io",
                    "docker.io"
                  ]
                }
              else
                empty
              end,
              if ${{ inputs.build-ce }} then
                {
                  "name": "tenzir-ce",
                  "static": true,
                  "upload-package-to-github": true,
                  "package-stores": [
                    "gcs:tenzir-tenzir/static-binary-builds"
                  ],
                  "image-registries": [
                    "622024652768.dkr.ecr.eu-west-1.amazonaws.com"
                  ]
                }
              else
                empty
              end,
              if ${{ inputs.build-cm }} then
                {
                  "name": "tenzir-cm",
                  "static": true,
                  "upload-package-to-github": true,
                  "package-stores": [
                    "gcs:tenzir-tenzir/static-binary-builds"
                  ],
                  "image-registries": []
                }
              else
                empty
              end,
              if ${{ inputs.build-ee }} then
                {
                  "name": "tenzir-ee",
                  "static": true,
                  "upload-package-to-github": true,
                  "package-stores": [
                    "gcs:tenzir-tenzir/static-binary-builds"
                  ],
                  "image-registries": [
                    "622024652768.dkr.ecr.eu-west-1.amazonaws.com"
                  ]
                }
              else
                empty
              end
            ] | ."version" = $v | ."tags" = $ARGS.positional' \
            --arg v "${{ steps.version.outputs.version }}" \
            --args -- "${tags[@]}")"
          # Reshape the config so that each edition is in a dedicated config.
          # This will be supplied as a matrix to the nix job.
          # We do this because the static editions that we build here are
          # independent derivations, meaning there is no sharing of build
          # products.
          nix_matrix="$(jq -c '.aliases as $aliases | .tags as $tags |
            .targets = (.editions | map(. as $e |{}|
              .editions = [$e] |
              .aliases = $aliases |
              .tags = $tags)
            ) | .targets | map({"name": .editions[0].name, "config": .})' \
            <<< "${nix_config}")"
          echo "nix-matrix=${nix_matrix}" >> "$GITHUB_OUTPUT"
          echo "::notice nix-matrix = ${nix_matrix}"

  nix-tenzir:
    name: Nix (${{ matrix.config.name }})
    needs:
      - configure
    uses: ./.github/workflows/nix.yaml
    strategy:
      matrix:
        config: ${{ fromJSON(needs.configure.outputs.nix-matrix) }}
    with:
      config: ${{ toJSON(matrix.config.config) }}
    secrets: inherit
