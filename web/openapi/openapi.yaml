---
openapi: 3.0.0
info:
  title: Tenzir Rest API
  version: "\"0.1\""
  description: "\nThis API can be used to interact with a Tenzir Node in a RESTful manner.\n\nAll API requests must be authenticated with a valid token, which must be\nsupplied in the `X-Tenzir-Token` request header. The token can be generated\non the command-line using the `tenzir-ctl web generate-token` command."
servers:
  - url: https://tenzir.example.com/api/v0
security:
  - TenzirToken:
      []
components:
  schemas:
    Metrics:
      type: object
      description: Information about pipeline data ingress and egress.
      properties:
        total:
          type: object
          description: Information about total pipeline metrics (e.g. total ingress/egress)
          properties:
            ingress:
              type: object
              description: Information about the total ingress. Contains no values when data has not passed through the source operator.
              properties:
                unit:
                  type: string
                  enum:
                    - bytes
                    - events
                  description: The unit of the input data.
                  example: bytes
              num_elements:
                type: integer
                description: The total amount of elements that entered the pipeline source.
                example: 109834
              num_batches:
                type: integer
                description: The total amount of batches that were generated during data processing in the pipeline source.
                example: 2
              num_approx_bytes:
                type: integer
                description: The total amount of bytes that entered the pipeline source. For events, this value is an approximation.
                example: 30414
              total_seconds:
                type: number
                description: The total duration of the pipeline source operation in seconds.
                example: 1.233998321
              processing_seconds:
                type: number
                description: The total duration of the pipeline source data processing in seconds.
                example: 1.179999992
            egress:
              type: object
              description: Information about the total egress. Contains no values when data has not passed through the sink operator.
              properties:
                unit:
                  type: string
                  enum:
                    - bytes
                    - events
                  description: The unit of the output data.
                  example: bytes
              num_elements:
                type: integer
                description: The total amount of elements that entered the pipeline sink.
                example: 30414
              num_batches:
                type: integer
                description: The total amount of batches that were generated during data processing in the pipeline sink.
                example: 1
              num_approx_bytes:
                type: integer
                description: The total amount of bytes that entered the pipeline sink. For events, this value is an approximation.
                example: 30414
              total_seconds:
                type: number
                description: The total duration of the pipeline sink operation in seconds.
                example: 2.945935512
              processing_seconds:
                type: number
                description: The total duration of the pipeline sink data processing in seconds.
                example: 1.452123512
    CreateParameters:
      type: object
      required:
        - definition
      properties:
        definition:
          type: string
          example: export | where foo | publish /bar
          description: The pipeline definition.
        start_when_created:
          type: boolean
          description: |
            Start this pipeline upon creation.
            This parameter must be true if the `hidden` parameter is also true.
          default: false
        name:
          type: string
          description: The human-readable name of the pipeline.
          default: "[an auto-generated id]"
          example: zeek-monitoring-pipeline
        hidden:
          type: boolean
          description: |
            A flag specifying whether this pipeline is hidden.
            Hidden pipelines are not persisted and will not show up in the /pipeline/list endpoint response.
          default: false
          example: false
        ttl:
          type: string
          description: |
            A duration string specifying the maximum time for this pipeline to exist. No value means the pipeline is allowed to exist forever.
            This parameter must be defined if the `hidden` parameter is true.
          default: ~
          example: 5.0m
        restart_with_node:
          type: boolean
          default: false
          description: |
            Check if the pipeline should be restarted when the Tenzir Node is restarted.
            This parameter must be false if the `hidden` parameter is true.
          example: false
    LaunchParameters:
      allOf:
        - $ref: "#/components/schemas/CreateParameters"
        - type: object
          required:
            - serve_id
          properties:
            serve_id:
              type: string
              description: The identifier for the `server` operator.
              example: "4ada2434-32asfe2s"
            serve_buffer_size:
              type: integer
              description: The maximum number of events to keep in the `serve` operator.
              example: 4000
    Diagnostics:
      type: array
      items:
        $ref: "#/components/schemas/Diagnostic"
    Diagnostic:
      type: object
      properties:
        severity:
          type: string
          enum:
            - error
            - warning
            - note
        message:
          type: string
          example: unknown option `--frobnify`
        annotation:
          type: array
          items:
            $ref: "#/components/schemas/Annotation"
        notes:
          type: array
          items:
            $ref: "#/components/schemas/Note"
        rendered:
          type: string
          example: "\u001b[1m\u001b[31merror\u001b[39m: unknown option `--frobnify`\u001b[0m\n"
    Annotation:
      type: object
      properties:
        primary:
          type: boolean
        text:
          type: string
          example: this option does not exist
          description: A potentially empty label.
        source:
          $ref: "#/components/schemas/Location"
    Note:
      type: object
      properties:
        kind:
          type: string
          enum:
            - note
            - usage
            - hint
            - docs
          example: usage
        message:
          type: string
          example: file <path> [-f|--follow] [-m|--mmap] [-t|--timeout <duration>]
    Location:
      type: object
      description: A region in the source code, defined by byte offsets.
      properties:
        begin:
          type: number
          example: 42
        end:
          type: number
          example: 48
    PipelineInfo:
      type: object
      properties:
        id:
          type: string
          description: The pipeline ID.
        name:
          type: string
          description: The human-readable name of the pipeline.
        definition:
          type: string
          description: The pipeline definition.
        state:
          type: string
          enum:
            - created
            - running
            - paused
            - failed
            - stopped
        error:
          type: string
          description: The error that the pipeline may have encountered during running.
        restart_with_node:
          type: boolean
          description: A flag specifying whether this pipeline should start upon launching the parent node.
          default: false
        operators:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: The pipeline operator ID.
              definition:
                type: string
                description: The pipeline operator definition.
              instrumented:
                type: boolean
                description: Flag that enables subscribing to this operator's metrics and warnings under /pipeline/(pipeline-id)/(operator-id).
        diagnostics:
          $ref: "#/components/schemas/Diagnostics"
        metrics:
          $ref: "#/components/schemas/Metrics"
  securitySchemes:
    TenzirToken:
      type: apiKey
      in: header
      name: X-Tenzir-Token
paths:
  /ping:
    get:
      summary: Returns a success response
      description: Returns a success response to indicate that the node is able to respond to requests. The response body includes the current node version.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                    description: The version of the responding node.
                    example: v2.3.0-rc3-32-g8529a6c43f
              example:
                version: v2.3.0-rc3-32-g8529a6c43f
        401:
          description: Not authenticated.
  /pipeline/create:
    post:
      summary: Create a new pipeline
      description: Creates a new pipeline. If `start_when_created` is `true`, the response is only sent after the pipeline was successfully started. If this fails, then the pipeline is immediately discarded, and the response contains the observed diagnostics. The error field then contains a rendered representation of the diagnostics. Otherwise, the diagnostics field is not present.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateParameters'
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: The ID of the successfully created pipeline.
        400:
          description: Invalid arguments or invalid pipeline.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                properties:
                  error:
                    type: string
                    example: Invalid arguments
                    description: The error message.
                  diagnostics:
                    $ref: "#/components/schemas/Diagnostics"
  /pipeline/delete:
    post:
      summary: Delete an existing pipeline
      description: Deletes an existing pipeline.
      requestBody:
        description: Body for the delete endpoint
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  example: 7
                  description: The id of the pipeline to be deleted.
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                type: object
                example:
                  {}
        400:
          description: Invalid arguments.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                properties:
                  error:
                    type: string
                    example: Invalid arguments
                    description: The error message.
  /pipeline/list:
    post:
      summary: List all existing pipelines
      description: Lists all existing pipelines.
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                type: object
                description: An array of all pipelines with additional information about their singular operators in order of execution.
                properties:
                  pipelines:
                    type: array
                    items:
                      $ref: "#/components/schemas/PipelineInfo"
        400:
          description: Invalid arguments.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                properties:
                  error:
                    type: string
                    example: Invalid arguments
                    description: The error message.
  /pipeline/reset-ttl:
    post:
      summary: Reset the TTL of an existing pipeline
      description: |
        Resets the TTL of an existing pipeline as specified, if one has been specified in the /create endpoint before.
        Resetting the TTL means that the TTL-related timeout will start counting from zero seconds again, thus keeping the pipeline alive for longer.
      requestBody:
        description: Body for the reset-ttl endpoint
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: string
                  example:
                    - 7
                    - 1
                    - 3
                  description: The id of pipelines whose TTL should be updated.
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ids:
                    type: array
                    items:
                      type: string
                    example:
                      - 7
                      - 1
                    description: The id of pipelines whose TTL has been successfully updated.
        400:
          description: Invalid arguments.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                properties:
                  error:
                    type: string
                    example: Invalid arguments
                    description: The error message.
  /pipeline/update:
    post:
      summary: Update pipeline state
      description: |
        Update the state of the pipeline.
        All values that are not explicitly included in the request are left in their old state.
      requestBody:
        description: Body for the update endpoint
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  example: 7
                  description: The id of the pipeline to be updated.
                action:
                  type: string
                  enum:
                    - start
                    - pause
                    - stop
                  description: The action that will change the pipeline's running state.
                  example: start
                name:
                  type: string
                  description: Update the human-readable name of the pipeline to this value.
                  example: zeek-monitoring-pipeline
                restart_with_node:
                  type: boolean
                  description: Flag that specifies whether the pipeline should be restarted when the Tenzir Node is restarted.
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                type: object
                description: The updated pipeline.
                properties:
                  pipeline:
                    $ref: "#/components/schemas/PipelineInfo"
        400:
          description: Invalid arguments.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                properties:
                  error:
                    type: string
                    example: Invalid arguments
                    description: The error message.
  /pipeline/launch:
    post:
      summary: Launch a new pipeline
      description: Depending on whether the pipeline ends with a sink, create the pipeline with a [`serve` sink](https://docs.tenzir.com/operators/sinks/serve) with the provided `/pipeline/create` parameters or notify that this pipeline is deployable for further action.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaunchParameters'
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: (If the pipeline does not end with a predefined sink) The ID of the successfully created pipeline.
                  deployable:
                    type: boolean
                    description: (If the pipeline ends with a predefined sink) Returns this property with the value `true`.
        400:
          description: Invalid arguments or invalid pipeline.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                properties:
                  error:
                    type: string
                    example: Invalid arguments
                    description: The error message.
                  diagnostics:
                    $ref: "#/components/schemas/Diagnostics"
  /serve:
    post:
      summary: Return data from a pipeline
      description: Returns events from an existing pipeline. The pipeline definition must include a serve operator.
      requestBody:
        description: Body for the serve endpoint
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serve_id
              properties:
                serve_id:
                  type: string
                  example: query1
                  description: The id that was passed to the serve operator.
                continuation_token:
                  type: string
                  example: 340ce2j
                  description: The continuation token that was returned with the last response. For the initial request this is null.
                max_events:
                  type: integer
                  example: 50
                  description: The maximum number of events returned. If unset, the number is unlimited.
                timeout:
                  type: string
                  example: 100.0ms
                  default: 100.0ms
                  description: The maximum amount of time spent on the request. Hitting the timeout is not an error. The timeout must not be greater than 5 seconds.
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  next_continuation_token:
                    type: string
                    description: A token to access the next pipeline data batch, null if the pipeline is completed.
                    example: 340ce2j
                  dropped:
                    type: integer
                    description: The serve endpoint will drop responses that exceed the configured maximum message size. The number of events dropped this way is returned here. Should be 0 most of the time.
                    example: 0
                  schemas:
                    type: array
                    items:
                      type: object
                      properties:
                        schema_id:
                          type: string
                          description: The unique schema identifier.
                        definition:
                          type: object
                          description: The schema definition in JSON format.
                    description: The schemas that the served events are based on.
                    example:
                      - schema_id: c631d301e4b18f4
                        definition:
                          record:
                            - timestamp: time
                              schema: string
                              schema_id: string
                              events: uint64
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        schema_id:
                          type: string
                          description: The unique schema identifier.
                        data:
                          type: object
                          description: The actual served data in JSON format.
                    description: The served events.
                    example:
                      - schema_id: c631d301e4b18f4
                        data:
                          timestamp: 2023-04-26T12:00:00.000000
                          schema: zeek.conn
                          schema_id: ab2371bas235f1
                          events: 50
                      - schema_id: c631d301e4b18f4
                        data:
                          timestamp: 2023-04-26T12:05:00.000000
                          schema: suricata.dns
                          schema_id: cd4771bas235f1
                          events: 50
        400:
          description: Invalid arguments.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                properties:
                  error:
                    type: string
                    example: Invalid arguments
                    description: The error message.
  /status:
    post:
      summary: Return current status
      description: Returns the current status of the whole node.
      requestBody:
        description: Body for the status endpoint
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                component:
                  type: string
                  description: If specified, return the status for that component only.
                  example: index
                verbosity:
                  type: string
                  enum:
                    - info
                    - detailed
                    - debug
                  default: info
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: object
              example:
                catalog:
                  num-partitions: 7092
                  memory-usage: 52781901584
                version:
                  Tenzir: v2.3.0-rc3-32-g8529a6c43f
        401:
          description: Not authenticated.
